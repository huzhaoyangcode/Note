计算机操作系统笔记
第一章 操作系统引论
计算机系统由硬件和软件两部分组成，操作系统是配置在计算机硬件上的第一层软件，是对硬件系统的首次扩充。而其他的诸如汇编程序，编译程序，数据库管理系统等系统软件，以及
大量的应用软件，都将依赖于操作系统的支持，取得它的服务。
1.1 操作系统的目标和作用
计算机系统上配置操作系统的目标受计算机系统的规模和应用环境的影响。有的着重于有效性，方便性，而有的则着重与实时性，高度可靠性等等。
	1.1.1 操作系统的目标
		  目前存在着多种类型的OS，不同类型的OS，其目标各有侧重，一般地说，在计算机上配置OS， 有如下目标：
		  有效性：主要包括提高系统资源利用率和提高系统的吞吐量两方面的含义。
		  方便性：显然，配置了OS的计算机系统更方便用户使用。
		  可扩充性：随着VLSI技术和计算机技术的迅速发展，计算机硬件和体系结构也随之发展，所以OS必须有很好的可扩充性，以适应这些发展。
		  开放性：是指系统能遵循世界标准规范，特别是遵循开放系统互连OSI国际标准。只有遵循标准，才能方便互连。
		  方便性和有效性是设计操作系统时最重要的两个目标，在过去的一长段时间由于硬件比较昂贵，所以更注重有效性，而随着硬件发展，硬件便宜了，方便性则更被注重。
		  
	1.1.2 操作系统的作用
		  操作系统的主要作用有：
		  OS作为用户与计算机硬件系统之间的接口：OS处于用户与计算机硬件之间，用户通过OS来使用计算机系统。通常通过命令，系统调用，图形窗口方式来使用计算机。
		  OS作为计算机系统资源的管理者：统一管理计算机硬件和软件资源。
		  OS实现了对计算机资源的抽象：隐藏硬件细节，抽象出操作硬件的软件接口。
		  
	1.1.3 推动操作系统发展的主要动力
		  主要动力可归结为四个方面：不断提高计算机资源的利用率、方便用户、器件的不断更新换代、计算机体系结构的不断发展
	
1.2 操作系统的发展过程
	1.2.1 无操作系统的计算机系统
		  无操作系统的计算机系统主要经过了人工操作方式和脱机输入输出方式两个阶段。
	1.2.2 单道批处理系统
		  单道批处理系统就是把要处理的程序提前放到磁带上，然后由计算机一个一个的处理，内存中每次只有一个程序，按照顺序处理磁带上的程序。旨在提高资源利用率和吞吐量。
	1.2.3 多道批处理系统
		  一次性在内存中装入多个用户提交的作业，当CPU由于操作IO而停止时候，切换运行的程序，从而达到提高计算机系统资源利用率和吞吐量的目的。
		  优点：资源利用率高，系统吞吐量大。
		  缺点：平均周转时间长，无交互能力。
		  由于多个程序共享资源运行，所以多道批处理系统需要解决：处理机管理问题、内存管理问题、IO设备管理问题、文件管理问题、作业管理问题。不同的问题用不同的软件管理，而
		  这么一组软件就构成了操作系统。据此，我们可把操作系统定义为：操作系统是一组控制和管理计算机硬件和软件资源，合理地对各类作业进行调度，以及方便用户使用的程序的集合。
	1.2.4 分时系统
		  分时系统是指在一台主机上连接了多个带有显示器和键盘的终端，同时允许多个用户通过自己的终端，以交互方式使用计算机，共享主机中的资源。
		  分时系统实现中的关键问题：及时接收，及时处理。为实现人机交互，当采用时间片轮转的方式处理程序。
		  分时系统的特征：多路性，独立性，及时性，交互性。
	1.2.5 实时系统
		  所谓实时，表示及时的意思。实时系统是指系统能及时响应外部事件的请求，在规定的时间内完成对该事件的处理，并控制所有实时任务协调一致的运行。
		  一般应用于实时控制，实时信息处理场合。
		  实时任务按任务执行时是否呈现周期性来划分：
		  									周期性实时任务:外部设备周期性地发出激励信号给计算机，要求它按周期循环执行，以便周期性地控制某外部设备。
											非周期性实时任务：外部设备所发出的激励信号，并无明显的周期性，但都必须联系着一个截止时间。截止时间又可分为开始截止时间和完成截止时间。
		  实时任务根据对截止时间的要求来划分：
				 			    		硬实时任务：系统必须满足任务对截止时间的要求，否则可能出现难以预测的结果。
							    		软实时任务：它也联系着一个截止时间，但并不严格，若偶尔错过了任务的截止时间，对系统产生的影响也不会太大。
			
	1.2.6 微机操作系统的发展
		  微机操作系统意为配置在微型机（PC）上的操作系统称为微机操作系统。
		  微机操作系统可以按运行方式分类为：单用户单任务操作系统（MS-DOS），单用户多任务操作系统（windows），多用户多任务操作系统（类UNIX）。
		  
1.3 操作系统的基本特征
    1.3.1 并发性
		  并行性和并发性是既相似又有区别的两个概念，并行性是两个或多个事件在同一时刻发生。而并发性是指两个或多个事件在同一时间间隔内发生。
		  操作系统中引入进程的目的是为了使多个程序能并发执行。
		  为使多个程序能并发执行，系统必须分别为每个程序建立进程。简单说来，进程是在系统中能独立运行并作为资源分配的基本单位，它是由一组机器指令，数据和堆栈等组成，
		  是一个能独立运行的活动实体。多个进程可以并发执行和交换信息。
		  线程是比进程更小的运行单位，通常一个进程包含若干个线程，它们可以利用进程所拥有的资源。通常进程作为分配资源的基本单位，而线程作为独立运行和独立调度的单位。
	1.3.2 共享性
		  在操作系统中所谓共享，是指系统中的资源可供内存中多个并发执行的进程（线程）共同使用，相应地，把这种资源共同使用称为资源共享，或称为资源复用。由于各种资源的属性不同，
		  进程对资源复用的方式也不同，目前主要实现资源共享的方式有如下两种：
		  互斥共享方式：系统中的某些资源，同一时间段只允许一个进程使用。这种资源共享的方式就是互斥共享方式，而这种资源称为临界资源或独占资源。
		  同时访问方式：系统中的某些资源，同一时间段允许多个进程访问，如磁盘，这种资源共享的方式就是同时访问方式。
		  并发和共享是操作系统的两个最基本的特征，他们又是互为存在的条件。资源共享是并发的条件，若不允许并发，系统也就不存在共享问题。
	1.3.3 虚拟技术
		  操作系统中所谓的虚拟，是指通过某种技术把一个物理实体变为若干个逻辑上的对应物。在操作系统中利用两种方式实现虚拟技术，即时分复用技术和空分复用技术。
		  时分复用技术：分时使用资源方式。如虚拟处理机技术和虚拟设备技术。
		  虚拟处理机技术：同时运行多个程序，这些程序分时被处理机处理，但是人们感官上觉得是一个处理机对应一道程序。这就是虚拟处理机技术。
		  虚拟设备技术：如打印机，本来是共享资源，但是我们可以分时使用，感官上觉得是同时使用不同的打印机。
		  空分复用技术：
		  虚拟磁盘技术：把硬盘分为多个虚拟卷，然后再进行使用，就是硬盘分区。
		  虚拟存储器技术：单纯的空分复用技术的虚拟存储器技术就是把多个程序同时调用到内存中，只提高了内存利用率，并没有起到扩大内存的效果。再加上时分复用技术的应用，
		  				就可以达到扩大内存的效果，可以使大程序在小内存中运行。200M的程序可以在20M的内存下运行，只是分时调用一部分程序而已。
	1.3.4 异步性
		  内存中的每个进程何时获得处理机，何时获得临界资源，何时因为资源忙碌而暂停，以及以怎样的速度运行都是不可预知的，这就是进程的异步性。尽管如此
		  只要操作系统中配置有完善的进程同步机制，且运行环境相同，作业经多次运行都会获得完全相同的结果。因此，异步运行方式是允许的，而且是操作系统的一个重要特征。
		  
1.4 操作系统的主要功能
	操作系统的主要任务，是为多道程序的运行提供良好的运行环境，以保证多道程序能有条不紊地、高效地运行，并能最大程度的提高系统中各种资源的利用率和方便用户的使用。
	为实现上述任务，操作系统应具有如下功能。
	1.4.1 处理机管理功能
		  在传统的多道程序系统中，处理机的分配和运行都是以进程为基本单位，因而对处理机的管理可归结为对进程的管理;在引入线程的操作系统中还包括对线程的管理。处理机管理的主要功能
		  是创建和撤销进程/线程，对诸进程/线程的运行进行协调，实现进程/线程之间的信息交换，以及按照一定的算法把处理机分配给进程/线程。
		  进程控制：进程控制的主要功能是为作业创建进程，撤销已结束的进程，以及控制进程在运行过程中的状态转换。在现代OS中，进程控制还应具有为一个进程创建多条线程的功能和撤销已完成
		  		  任务的线程。
		  进程同步：为使多个进程能有条不紊的运行，系统中必须设置进程同步机制。进程同步的主要任务是为多个进程的运行进行协调。有两种协调方式：进程互斥方式和进程同步方式。
		  		  进程互斥方式：一般采用锁的方式控制进程访问临界资源。
				  进程同步方式：进程之间互相配合完成某任务时，由同步机制对它们的执行次序加以协调。有的使用信号量进行控制。
		  进程通信：当同一个任务创建了多个进程互相配合进行完成时，这些进程有的时候需要通信，进程通信的方式有很多种，一般若多个进程在同一个操作系统的情况下，大多使用消息队列的方式。
		  调度：在后备队列上等待的每个作业都需要经过调度才能执行，在操作系统中分为两步作业调度和进程调度。
		  	   作业调度：按照一定的算法调度多个作业进入内存，并为他们建立进程，插入就绪队列。
			   进程调度：按照一定的算法在就绪队列中挑选进程，为他们分配处理机，若有线程，进程作为分配处理机资源的基本单位，进程拿到处理机资源，然后再选一个进程中的线程进行处理。
		  
	1.4.2 存储器管理功能
		  存储器管理的主要任务是为多道程序的运行提供良好的环境，方便用户使用存储器。提高存储器的利用率以及能从逻辑上扩充内存。为此存储器管理应具有如下功能：
		  内存分配：内存分配的主要任务是为每道程序分配内存空间。OS在实现内存分配时，可采取静态和动态两种方式，静态分配是在作业装入时确定的，运行过程中不允许该作业再申请新的内存空间。
		  		  动态分配也是在作业装入时确定的，但运行过程中允许作业再申请新的内存空间。
		  内存保护：内存保护的主要任务是确保每道用户程序都只在自己的内存空间内运行，彼此互不干扰;绝不允许用户程序访问操作系统的程序和数据;也不允许用户程序转移到非共享的其他用户程序中
		  		  去执行。一种比较简单的内存保护机制是设置两个界限寄存器。上界和下界。系统需对每条指令所访问的地址进行检查。软件检查太慢，所以一般用硬件进行检查。
		  地址映射：把程序对应的逻辑地址映射为与内存空间对应的物理地址。
		  内存扩充：借助于虚拟存储技术，从逻辑上扩充内存容量。为了能在逻辑上扩充内存，系统必须有内存扩充机制，
		  		  用于实现下述功能：
							    请求调入功能：允许在装入一部分用户程序和数据的情况下，便能启动程序运行，当需要运行的程序不在内存中时，允许从磁盘调入部分程序然后再运行。
								置换功能：若发现内存中无多余空间放待调入的程序，允许把内存中暂时不用的一些程序和数据放回磁盘，然后从磁盘中调入待运行的程序。
	1.4.3 设备管理功能
		  管理用于管理计算机系统中所有的外围设备，而设备管理的主要任务是：完成用户进程提出的IO请求;为用户进程分配其所需的IO设备;提高CPU和IO设备的利用率;提高IO速度;方便用户使用IO设备;
		  现上述任务，设备管理应具有缓冲管理，设备分配和设备处理以及虚拟设备等功能。
		  缓冲管理：由于CPU和IO之间的速度不匹配，影响CPU效率，为了解决这个问题，计算机系统中一般在CPU和IO中设置了缓冲，这些缓冲区需要系统进行管理。
		  设备分配：根据用户进程请求按照一定的分配策略进行分配，为实现分配，设备中应该设置有设备控制表，控制器控制表等，用来记录设备标识符和状态，以供分配时参考。
		  		  不同设备类型应采用不同的分配策略。
		  设备处理：设备处理程序又称为设备驱动程序。其基本任务就是实现CPU和设备控制器之间的通信，即由CPU向设备控制器发出IO命令，要求它完成指定的IO操作，反之，由CPU接收从控制器发来的
		  		  中断请求，并给予迅速的响应和相应的处理。
	1.4.4 文件管理功能
		  现代计算机常把数据和程序以文件的方式存储到磁盘或磁带，所以操作系统中必须配有文件管理机构，文件管理的主要任务是对用户文件和系统文件进行管理，以方便用户使用，并保证文件的安全性。
		  为此，文件管理应具有对文件存储空间的管理，目录管理，文件的读/写管理，以及文件的共享与保护等功能。
		  文件存储空间的管理：由文件系统统一管理，文件系统的主要任务是为每个文件分配必要的外存空间，提高外存的利用率，并能有助于提高文件系统的存取速度。
		  				   为此，系统应设置相应的数据结构，用于记录文件存储空间的使用情况，以供分配存储空间时参考。系统还应具有对存储空间进行分配和回收的功能，为了
						   提高存储空间的利用率，对存储空间的分配，通常采用离散分配方式，以减少外存零头，并以盘块为基本分配单位。盘块的大小通常为1～8KB
		  目录管理：为了使用户能方便地在外存上找到自己所需的文件，通常由系统为每个文件建立一个目录项。目录项包括文件名，文件属性，文件在磁盘的物理位置等。由若干个目录项又可构成
		  		  一个目录文件。目录管理的主要任务，是为每个文件建立其目录项，并对众多的目录项加以有效的组织，以实现方便的按名存取。
		  文件的读写管理和保护：读写管理即根据用户的请求，从外存中读取数据，或将数据写入外存。而保护即防止未经核准的用户存取文件，防止冒名顶替存取文件，防止以不正确的方式存取文件。
		  
	1.4.5 操作系统与用户之间的接口
		  接口分为两大类：用户接口和程序接口。
		  用户接口：它是提供给用户使用的接口，用户可通过该接口取得操作系统的服务。命令行，或图形界面。
		  程序接口：它是提供给程序员编程时使用的接口，是用户程序取得操作系统服务的唯一途径。系统调用。
	
1.5 OS结构设计
	由于操作系统的代码非常多，必须采用工程化的开发方法对这种大型软件进行开发。由此产生了软件工程学。软件工程的目标是十分明确的，所开发出的软件产品应具有良好的软件质量和合理的费用。
	软件质量评价标准：功能性，有效性，可靠性，易使用性，可维护性和易移植性。为此产生了多种操作系统的开发方法，如模块化方法，结构化方法和面向对象方法。利用不同的开发方法所开发出的操作系统
	将具有不同的操作系统结构。
	1.5.1 传统的操作系统结构
		  软件开发技术的不断发展，促进了OS结构的更新换代，我们把无结构OS-->模块化结构OS-->分层式结构OS称为传统操作系统结构，而把微内核结构的OS称为现代结构的OS。
		  无结构操作系统：一组过程的组合，过程之间又可以相互调用，太乱了，并且不容易理解。
		  模块化结构OS：把操作系统的功能分为若干个大的功能模块，并在模块之间建立交流的接口，大的模块在内部又可以分成小的模块，并定义内部接口。这种结构称为模块接口法，最重要的就是
		  			  尽可能的划分出相对独立的模块。
		  分层式结构OS：自底向上一层一层的铺设代码，每一层只能使用下层提供的接口，并为上层提供接口，每一层使用模块接口法开发，保证了开发的有序性，只要尽可能保证本层的开发可靠，并假设
		  			自己的依赖层是可靠的，这样易保证系统的正确性，易扩充和易维护，但也有效率低的特点。
	1.5.2 客户/服务器模式（C/S）
		  客户/服务器系统主要由客户机、服务器和网络系统三个部分组成。
		  客户机和服务器之间交互分为4步：第一步就是客户机发送请求信息给服务器，第二步就是服务器接受并处理，第三步就是服务器把处理后的内容回送给客户机 第四步就是客户机接收信息并
		  处理之后返回给用户。这种模式是通过客户机和服务器共同完成对应用程序的处理。
		  优点：数据的分布处理和存储;便于集中管理;灵活性和可扩充性;易于改编应用软件;
	1.5.3 面向对象的程序设计
		  把一类具有相同属性，服从相同规则的一系列事物进行抽象，得到的就是一个对象类，而由一个对象类生成的实例就是一个对象。也可以通过继承的方式生成类，提高了代码的重用，隐蔽性能。
		  优点：通过重用提高产品质量和生产率。使系统具有更好的易修改性和易扩展性。更易于保证系统的正确性和可靠性。
		  
	1.5.4 微内核OS结构
		  让内核足够小，只包含一些最基本的功能，其他的一些功能都以服务器的形式放在内核之外，用户程序向内核提出请求，内核选择相应的功能服务器，然后由功能服务器进行处理，再把结果
		  传递给内核，内核再传递给用户。
		  微内核集成的功能一般有：进程（线程）管理，低级存储器管理，中断和陷入处理。
		  采用机制和策略分离的技术，机制在内核中，策略在服务器中。
		  优点：由于微内核结构是建立在模块化和层次化基础上的，并且采用了客户机/服务器模式和面向对象的程序设计技术，由此可见，微内核结构的OS集各种技术优点之大成，因而使之具有如下优点：
		  	   提高了系统的可扩展性，增强了系统的可靠性，可移植性，提供了对分布式系统的支持，融入了面向对象技术。
		  缺点：进行用户和内核模式的切换次数太多，导致效率有点低。 
	
第二章 进程管理
2.1 进程的基本概念
	由于现代的操作系统需要程序的并发执行，所以操作系统才引用了进程。
	2.1.1 程序的顺序执行及其特征
		  所谓顺序执行就是当一个程序结束了之后才能进入下一个程序执行。其特征有：顺序性，封闭性（程序独占系统资源），和可再现性。
	2.1.2 前趋图
		  前趋图是一种有向无循环图，记作DAG。用来描述进程之间执行的前后关系。不能存在循环。
	2.1.3 程序的并发执行及其特征
		  互相不冲突的进程同一时刻或时间段运行.程序并发执行时的特征有间断性，失去封闭性，不可再现性。
		  间断性：共享系统资源导致间断性。
		  失去封闭性：共享系统资源导致各个进程之间互相影响，失去封闭性。
		  不可再现性：由于失去封闭性，导致可再现性丢失。
	2.1.4 进程的特征与状态
		  为了使程序能并发执行，且为了对并发执行的程序加以描述和控制，人们引入了进程的概念。
		  特征有以下几个：
		  				结构特征：通常的程序是不能并发执行的。为使程序能独立运行，应为之配置一进程控制块,PCB;而由程序段，相关的数据段和PCB三部分便构成了进程实体。在很多情况下所说的
		  		  		进程实际上是指进程实体。所谓创建进程，实际上是创建进程实体中的PCB;而撤销进程，实质上是撤销进程中的PCB。
		  				动态性：进程的实质是进程实体的一次执行过程，所以动态性是进程的最基本特征。
		  				并发性：这是指多个进程实体存放于内存中，且能在一段时间内同时运行。并发性是进程的重要特征，同时也是OS的重要特征。引入进程实体的目的就是为了让多个进程实体可以并发执行。
		  				独立性：独立性是指进程实体是一个能独立运行，独立分配资源和独立接受调度的基本单位。凡未建立PCB的程序都不能作为一个独立的单位参与运行。
		  				异步性：是指进程各自独立的，不可预知的速度向前推进，或说进程实体按异步方式运行。进程是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。
		  进程的三种基本状态：
		  				  就绪状态：当进程已分配到除CPU以外的所有必要资源后，只要再获得CPU，便可立即执行，进程这时的状态称为就绪状态。在一个系统中处于就绪状态的进程可能有多个，
						  		  通常将它们排成一个队列，称为就绪队列。
						  执行状态：进程已获得CPU，其程序正在执行。在单处理机系统中，只有一个进程处于执行状态;在多处理机系统中，则有多个进程处于执行状态。
						  阻塞状态：正在执行的进程由于发生某事件而暂时无法继续执行时，便放弃处理机而处于暂停状态，也就是进程的执行受到阻塞，这种状态就是阻塞状态。而时间片用完
						  		  之后进程是进入就绪状态。当不阻塞了，进程也先进入就绪状态，而执行状态是肯定从就绪状态切换过来的。
		  挂起状态：暂时不参于进程调度。
		  创建状态：创建PCB的过程。
		  终止状态：销毁PCB的过程。
		  				
	2.1.5 进程控制块（PCB）
		  进程控制块的作用：进程控制块是进程在系统中的唯一标识，为系统控制进程提供统一的数据结构，为进程的并发提供基础设施。记录了操作系统所需的，用于描述进程的当前情况以及
		  				 控制进程运行的全部信息。
		  进程控制块中主要包括下述四方面的信息：
		  						进程标识符：内部标识符(系统为每一个进程赋予了一个唯一的数字标识符，方便系统使用。)和外部标识符(它有创建者提供，由数字字母组成，
										  往往是由用户(进程)在访问该进程时使用)。
								处理机状态：处理机的状态信息都在其寄存器中，当处理机被中断时，所有这些信息都必须保存在PCB中，以便在该进程重新执行时，能从断点继续执行。
								进程调度信息：一些与进程调度和进程对换有关的信息，包括
										    进程状态：当前进程的状态，作为调度的依据。
											进程优先级：优先级，调度算法使用。
											进程调度所需的其他信息：进程运行时间，总运行时间等，用于调度时的判断等。
											事件：阻塞原因等。
								进程控制信息：
											程序和数据的地址：进程的程序和数据所在的内存或外存地址，以便再调度到该进程时，能从PCB中找到其程序和数据。
											进程同步和通信的机制：消息队列，信号量等。
											资源清单：一张列出了，除CPU以外的，进程所需的全部资源以及已经分配到的资源的清单。
											链接指针：给出了本进程所在队列的中的下一个进程的PCB的首地址。
		进程控制块的组织方式：一个系统中通常可拥有数十个，数百个乃至数千个PCB。为了能对它们加以有效的管理，应当用适当的方式将这些PCB组织起来。目前常用的组织方式有以下两种：
						 链接方式：按照状态不同建立不同的链表。
						 索引方式：根据状态不同建立索引表，索引表中记录PCB的地址，而系统根据索引表指针去检索PCB地址。
		由于PCB经常被使用，所以需要常驻内存。
		
2.2 进程控制
进程控制是进程管理中最基本的功能，用于进程创建，销毁回收，改变进程状态，由OS中内核原语操作完成。所谓原语，就是由几个指令组成的不允许被中断的最基本的原子操作。
	2.2.1 进程的创建
		  1、进程之间是有辈份关系的，父进程和子进程关系，从而形成了进程图，为了标识这种关系，进程PCB中都配有家族关系表项，以标明自己的父进程和所有的子进程。
		  2、一般引起进程创建的事件有：用户登录，作业调度，提供服务，应用请求。
		  3、一旦操作系统发现了要求创建新进程的事件后，便调用进程创建原语Create()按下述步骤创建一个新进程。
		  	申请空白PCB-->为新进程分配资源-->初始化进程控制块-->将新进程插入就绪队列。
	2.2.2 进程的终止
		  1、引起进程终止的事件：
		  			正常结束：当程序运行结束，一般会在程序的最后插入一条特定的语句，当程序完成会中断CPU并告知。
					异常结束：在程序运行期间，由于出现某种错误和故障而迫使进程终止，常见的有：越界错，保护错，非法指令，特权指令，运行超时，算术运算错，IO故障。
					外界干预：进程应外界的请求而终止运行。如：操作员或操作系统干预，父进程请求，父进程终止。
		  2、进程的终止过程：
		  		  		  根据终止进程标识符，检索出进程，并读取其状态。
						  				若被终止进程正处于执行状态，应立即终止该进程的执行，并设置调度标志为真，标明可被再次调度。
										若进程有子进程，应将其所有子进程终止，以防止它们成为不可控的进程。
																将资源归还给父进程或系统。
																将PCB从队列中移出，等待其他程序来搜集信息。
							
	2.2.3 进程的阻塞与唤醒
		  1、引起进程阻塞或唤醒的事件：请求系统服务，启动某种操作，新数据尚未到达，无新工作可做。
		  2、进程阻塞过程：发生上述情况，进程调用阻塞原语block，阻塞住自己，先停止运行，然后把PCB插入阻塞队列，然后转调度程序，调度其他就绪程序，亦即保存被阻塞的进程的CPU环境
		  				进入PCB，按照就绪状态的进程PCB设置CPU环境。
		  3、进程唤醒过程：首先把阻塞的进程从等待该事件的阻塞队列中移出，将其PCB中的现行状态由阻塞改为就绪，然后将PCB插入到就绪队列中。
		  				应当指出block和wakeup原语是一对作用刚好相反的原语，所以调用block的进程必须把wakeup原语安排好，不然就一致处于block状态了。
		  
	2.2.4 进程的挂起与激活
		  1、进程的挂起：当进程请求挂起或者父进程请求挂起子进程，将调用suspend原语，若进程处于活动或就绪状态则转为静止就绪，若处于阻塞则调整为静止阻塞，并且为了
		  			   方便用户访问其运行状态，讲PCB拷贝的一个特定的内存区域。若被挂起进程正在执行，则转向调度程序重新调度。
		  2、进程的激活过程：当激活事件发生时，系统将利用激活原语active进行激活，激活原语先将进程从外存调入内存，检查该进程的现行状态，若是静止就绪，便将其改为活动就绪，
		  				  若是静止阻塞就改为活动阻塞。

2.3 进程同步
进程同步的主要任务是对多个相关进程在执行次序上进行协调，以使并发执行的诸进程之间能有效的共享资源和相互合作，从而使程序的执行具有可再现性。
	2.3.1 进程同步的基本概念
		  1、两种形式的制约关系：间接相互制约关系(进程之间争夺共享资源)和直接相互制约关系(进程之间相互合作，一方需要获得另一方的数据)。
		  2、临界资源：多进程共享资源，不能同时访问或修改，需采用互斥的方式进行访问。
		  3、临界区：人们把在每个进程中访问临界资源的那段代码称为临界区，显然，若能保证各进程互斥的进入自己的临界区，便可实现诸进程对临界资源的互斥访问。
		  			一般临界区代码前面有进入区，后面有退出区。
		  4、同步机制应遵循的规则：空闲让进，忙则等待，有限等待，让权等待。
	2.3.2 信号量机制
		  1、整型信号量：整型信号量定义为一个用于表示资源数目的整型量S，它与一般整型量不同，除初始化外仅能通过两个标准的原子操作来访问。即PV操作。
		  2、记录型信号量：该信号量除了包含表示资源数目的value还包含一个链接所有等待进程的指针。满足让权等待需求。
		  3、AND型信号量：用于解决进程共享多个资源，并每个进程需要同时获得多个资源才能运行的问题。其基本思想就是将进程在整个运行过程中所需要的所有资源，一次性全部地
		  				分配给进程，待进程使用完后再一起释放。只要尚有一个资源未分配给进程，其它所有可能为之分配的资源也分配给它。
		  4、信号量集：包含所有可控进程同步机制的信号量。
	2.3.3 信号量的应用
		  1、利用信号量实现进程互斥：为使多个进程能互斥的访问某临界资源，只需为该资源设置一互斥信号量mutex，并设其初始值为1,然后将各进程访问该资源的临界区CS置于PV操作之间即可。
		  2、利用信号量实现前趋关系：利用PV操作的缺省，来控制进程之间的这种顺序关系，例如，若想P1-->P2，设置信号量v=0, P1 signal(v); wait(v) P2;这样就好了，如果涉及的进程
		  						多，就是想控制多个进程的顺序关系，增加信号量数量即可。
	2.3.4 管程机制
		  管程的定义：管程就是为了让多进程操作共享资源而不需要信号量而封装起来的共享资源的数据结构，是操作系统的一个资源管理模块，包含共享资源和操作。
		  条件变量：用来记录是哪种条件而导致的进程阻塞，也就是用来分类不同原因访问管程阻塞的进程。
2.4 经典进程的同步问题
	2.4.1 生产者-消费者问题
		  略
	2.4.2 哲学家进餐问题
		  略
	2.4.3 读者-写者问题
		  略
2.5 进程通信
	2.5.1 进程通信的类型
		  目前，进程的高级通信机制可归结为三类：共享存储器系统，消息传递系统以及管道通信系统。
		  共享存储系统：主要是基于共享存储区的通信方式，为了传输大量数据，在存储器中划出了一块共享存储区，诸进程可通过对共享存储区中数据的读或写来实现通信。
		  			  进程通信前，先向系统申请获得共享存储区的一个分区，并指定该分区的关键字;若系统已经给其他进程分配了这样的分区，则将该分区的描述符，返回给申请者，
					  继之，由申请者把获得的共享存储分区连接到本进程上;此后，便可像读写普通存储区一样地读、写该共用存储分区。
		  消息传递系统：该机制中，进程间的数据交换是以格式化的消息为单位的，在计算机网络中，又把message称为报文。程序员只需要利用操作系统提供的通信命令就可以直接进行通信，
		  			  在当今最为流行的微内核操作系统中，微内核与服务器之间的通信，都使用了此种方式。
		  管道通信系统：所谓管道，就是指用于连接一个读进程和一个写进程以实现它们之间通信的一个共享文件，又名pipe文件。向管道（共享文件）提供输入的发送进程，以字符流形式将大量的
		  			  数据送入管道，而接受管道输出的接收进程，则从管道中接收读数据。为了协调双方的通信，管道通信必须提供三个方面的协调能力：
					  1、互斥，当一个进程进行读或写的时候，其他进程必须等待。
					  2、同步，当写进程写了一定数量的数据，就去睡眠，读进程读完之后，再唤醒写进程。反之亦然。
					  3、确定对方是否存在。只有确定对方已存在时，才能通信。
	2.5.2 消息传递通信的实现方法
		  略
	2.5.3 消息传递系统实现中的若干问题
		  略
	2.5.4 消息缓冲队列通信机制
		  略
2.6 线程
	2.6.1 线程的基本概念
		  如果说，在操作系统中引入进程的目的，是为了使多个程序能并发执行，以提高资源利用率和系统吞吐量，那么在操作系统中再引入线程，则是为了减少程序在并发执行时所付出的
		  时空开销，使OS具有更好的并发性。由于进程是资源分配和调度，切换的基本单位，所以计算机系统中不宜创建很多进程并且不宜频繁切换，引入线程之后，以线程为调度和切换对象，
		  则去掉了进程的重，提高了系统性能。
		  线程具有的属性：轻型实体，独立调度和分配的基本单位，可并发执行，共享进程资源。
	2.6.2 线程间的同步和通信
		  互斥锁：锁一段代码，让线程互斥的执行此段代码。
		  条件变量：单纯的互斥锁只限制线程互斥访问临界区，而条件变量则用于线程的长期等待，直至所等待的资源成为可用的资源。
		  信号量机制：分为私用信号量和共用信号量，私用信号量是进程的所有线程的信号量，而共用是进程间的线程的信号量。
	2.6.3 线程的实现方式
		  线程的实现方式有三种：
		  1、内核支持线程
		  	内核支持线程把线程作为内核调度的单位，内核通过线程控制块来感知线程，用户的线程切换要进入内核态，有点浪费时间，但是优点也有很多，如内核线程切换效率高，
			如果进程中的线程被阻塞，则内核可以调用进程中的其他线程执行。
		  2、用户级线程
		  	内核根本没有感知到线程的存在，还是以进程为调度的单位，一个进程同一时刻会用一个CPU，并且一个进程同一时刻只能运行一个线程。线程系统调用时的阻塞会阻塞所有线程。
		  3、组合方式
		  内核既支持线程，也允许用户自己建立线程。同一个进程的线程是可以在不同的CPU上并发执行。
	2.6.4 线程的实现
	
	
第三章 处理机调度与死锁

	








