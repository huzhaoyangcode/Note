计算机组成原理笔记
第一篇 概论
第一章 计算机系统概论
1.1 计算机简介
	1.1.1 计算机的软硬件概念
		  计算机由软件和硬件组成。
		  硬件是计算机的物理组成，各种电子元件，光，电， 机等各种可以看到，摸到的东西。
		  软件则看不到摸不着，由人们事先编制的具有各类特殊功能的程序组成。通常储存在计算机的主存或辅存中。
		  软件可以充分发挥硬件的功能，软件的性能必须依赖于硬件。
		  计算机软件又分为系统软件和应用软件。
		  系统软件又称为系统程序，主要用来管理整个计算机系统，监视服务（程序），使系统资源得到合理调度，高效运行。
		  包括标准程序库，语言处理程序，操作系统，服务程序（诊断，调试，连接），数据库管理系统，网络软件。
		  应用软件又称为应用程序，它是用户根据任务需要所编制的各种程序。
		  
	1.1.2 计算机系统的层次结构
		  计算机系统为了方便分析可以抽象为如下所示的多层次结构：
		  
		  ---------------------------------------------
		  虚拟机器M4（高级语言程序）用编译程序翻译成汇编语言程序
		  ---------------------------------------------
		  虚拟机器M3（汇编语言机器）用汇编语言翻译成机器语言程序
		  ---------------------------------------------
		  虚拟机器M2（操作系统机器）用机器语言解释操作系统
		  ---------------------------------------------
		  传统机器M1（机器语言机器）用微程序解释机器指令
		  ---------------------------------------------
		  微程序机器M0（微指令系统）由硬件直接执行微指令
		  ---------------------------------------------
		  
		  由层次结构划分可知，硬件研究的是M1和M0的组成原理和思想。软件则研究的是M2及其以上各种虚拟机。
		  上面层次结构中用来将高级语言翻译成汇编语言的编译程序分为两种，一种是编译程序，一种是解释程序。
		  编译程序会在程序运行之前将程序一次性翻译过去，而解释程序则在程序运行的时候，解释一句，运行一句。
		  
	1.1.3 计算机组成和计算机体系结构
		  学习计算机一定要区分好计算机组成和计算机体系结构。
		  计算机体系结构是指程序员能够看到的一些东西，是接口，是属性。而计算机组成则是如何实现这些属性。
		  不同组成的计算机可能体现相同的体系结构。例如共有两台计算机都支持乘法运算，这是属性，是体系结构的内容。而如何实现的乘法，
		  用什么样的电路，硬件等则是计算机组成的内容。
		  
		  本书主要研究计算机组成原理。
		  
1.2 计算机基本组成
	1.2.1 冯.诺依曼计算机的特点
		  计算机由运算器，控制器，存储器，输入设备，输出设备五大部件组成。
		  指令和数据以同等地位存放于存储器内，并可按地址寻访。
		  指令和数据均用二进制数据表示。
		  指令由操作码和地址码组成，操作码用来用来表示操作的性质，地址码用来表示操作数在存储器中的位置。
		  指令在存储器内按顺序存放，通常指令是顺序执行的，在特定条件下，可根据运算结果或根据设定的条件改变执行顺序。
		  机器以运算器为中心，输入输出设备，与存储器之间的数据传送通过运算器完成。
		  
	1.2.2 计算机的硬件框图
		  冯.诺依曼计算机是以运算器为中心的，而现代的计算机则是以存储器为中心的。
		  计算机的运算器和控制器合称为CPU, 输入设备和输出设备合称为IO, 所以现代的计算机可以看作由CPU IO设备， 以及主存储器三大部件组成的。其中CPU和主存合称为主机，
		  而IO设备则属于外围设备。
		  主存储器是存储系统的一部分，存储系统还包括辅存。
		  ALU(算术逻辑单元) 和 CU(控制单元) 是CPU的核心部件。
		  计算机有条不紊的自动工作都是在控制器统一指挥下完成的。
		  
	1.2.3 计算机的工作步骤
		  计算机上电后，cpu中的控制器会根据其内部的程序计数器里面的值，向主存发出读指令，主存会把地址为0的数据取出并传送给控制器，控制器会分析取出的数据，然后根据数据里的指令继续
		  执行，有的时候需要让运算器去运算，有的时候会调用主存，IO设备等，整体而言，计算机工作是在控制器的控制下，进行取指，分析，执行的过程，进行运行的，直到程序结束或者机器断电。
	
1.3 计算机硬件的主要技术指标
	1.3.1 机器字长
		  机器字长是指CPU一次能处理数据的位数，通常于CPU的寄存器位数有关。
		  机器字长影响运算精度，运算速度，和造价。机器字长越长表示的数的范围大，精度高，运算速度也快。
		  但是字长也会影响加法器，数据总线，以及存储字长的位数，间接影响机器造价。选择字长则以应用而论。
		  常见机器字长为32和64位。机器字长=存储字长，32位能表示的地址范围2^32次方。所以32位机器最多配4G主存。
		  32位系统可以运行在32位和64位机器，而64位系统执行运行在64位机器上。
		  
	1.3.2 存储容量
		  存储器容量，包括主存，和辅存容量。
		  主存容量是指主存中能够存储二进制代码的总位数。= 存储单元个数 × 存储字长。
		  现代计算机以字节来描述容量大小，可寻址最小单位也是字节（byte）。1字节=8位（bit）
		  计算机的世界：1G=1024M 1M=1024bytes
		  厂商世界：1G=1000M 
		  所以厂商所说的500G硬盘，计算机显示不到500G.
		  
	1.3.3 运算速度
		  机器的运算速度跟很多因素有关，如主频，主存本身速度等等。现在衡量机器的运算速度一般用MIPS（million instruction per second）每秒能执行的百万指令数。
	
第二章 计算机的发展和应用
	  晶体管-->电子管-->超大规模集成电路
	  体积大------------------>体积小
	  速度慢------------------>速度快
	  
	  计算机在各个方面都有应用。
	  
第二篇 计算机系统的硬件结构
第三章 系统总线
3.1 总线的基本概念
	总线是连接多个部件的信息传输线，是各部件共享的传输介质。在某一时刻，只允许有一个部件向总线发送信息，而多个部件可以同时从总线上接收相同的信息。
	
3.2 总线的分类
	总线：片内总线，系统总线，通信总线。
	片内总线：芯片内部的总线，如CPU芯片内部，寄存器与寄存器之间，寄存器与ALU之间都是由片内总线连接。
	系统总线：CPU, 主存，IO设备各大部件之间的信息传输线。由于这些部件通常都安放在主板，或各个插件板上，故又称板级总线。
			系统总线根据传输的种类又可以分为：数据总线，地址总线，和控制总线。
			数据总线：传输各部件之间的数据信息，双向，位数与机器字长和存储字长有关。数据总线的位数称为数据总线的宽度，是衡量系统性能的一个重要参数。
			地址总线：用来指出数据总线上数据的地址，由CPU发出，单向传输。地址线的位数与存储单元的个数有关。存储单元个数=2^地址线位数
			控制总线：控制总线是用来发出各种控制信号的传输线，来控制数据总线和地址总线的共享行为。对于单个控制总线而言总是单向的，但是整体而言可以说控制总线是双向的。即由负责输出的。
					有负责输入的。
	通信总线：用于计算机系统之间或计算机系统与其他系统（移动通信，智能仪表等）之间的通信。按传输方式分为串行通信和并行通信。
			串行通信：数据在单条一位宽的传输线上，一位一位地按顺序分时传送。可传送距离远。
			并行通信：数据在多条并行一位宽的传输线上，同时由源传送到目的地。可传送距离近。一般小于30米。
			
3.3 总线特性及性能指标
	3.3.1 总线特性
		  现代计算机的总线，从物理角度来看，总线由许多导线直接印制在电路板上，延伸到各个部件。
		  所以为了保证机械上的可靠连接，必须规定其机械特性。为了保证电气上正确连接，必须规定其电气特性。为了保证正确的连接不同部件，还需规定其功能和时间特性。
		  机械特性：总线在机械连接上的一些性能，如插头和插座使用的标准，他们的集合尺寸，形状，引脚的个数，排列顺序，接头的可靠接触等。
		  电气特性：总线的每一根传输线上信号的传递方向和有效的电平范围。通常规定由CPU发出的信号称为输出信号，送入CPU的信号为输入信号。
		  		  地址总线是单向输出线。数据总线是双向的，它们都定义高电平为1, 低电平为0。控制总线的每一根都是单向的，但从整体看，有输入也有输出。
				  有的定义为高电平有效，有的定义为低电平有效必须注意不同的规格。大多数总线的电平定义与TTL是相符的。
		  功能特性：总线每根传输线的功能。地址总线用来指出地址码;数据总线用来传输数据;控制总线发出控制信号，既有从CPU发出的 存储器读写，IO设备读写，
		  		  也有IO设备向CPU发来的，中断请求，DMA请求等;由此可见，各条线的功能不同。
		  时间特性：总线中的任一根线在什么时间内有效。
		  
	3.3.2 总线性能指标
		  总线宽度：通常是指数据总线的根数，用bit(位)来表示，如8、16、32、64位（即8、16、32、64根）
		  总线带宽：总线的数据传输速率。即单位时间内总线上传输数据的位数。通常用每秒传输信息的字节数来衡量，单位可用MBps.
		  时钟同步/异步：总线上的数据与时钟同步工作的总线称为同步总线，与时钟不同步工作的总线称为异步总线。
		  总线复用：一条信号线上分时传送两种信号。例如地址总线和数据总线只用一组线，分时传送地址码和数据码。
		  信号线数：地址总线，数据总线和控制总线三种总线数的总和。
		  总线控制方式：突发工作，自动配置，仲裁方式，逻辑方式，计数方式等。
		  其他指标：负载能力，电源电压，总线宽度能否扩展等。
		  		  负载能力即驱动能力，当总线接上负载后，总线输入输出的逻辑电平是否能保持在正常的额定范围内。
		  
	3.3.3 总线标准
		  总线标准，可视为系统与各模块，模块与模块之间的一个互连的标准界面。为模块互连提供了支持。可以说是协议
		  常见流行总线标准：
		  			ISA：
					EISA： 
					VESA： 
					PCI： 
					AGP： 
					RS-232C： 
					USB：universal serial Bus 通用串行总线，标准USB电缆长度为3米，低速传输方式为5米，通过HUB或中继器可使传输距离达30米
	
3.4 总线结构
	3.4.1 单总线结构
		  单总线结构是将CPU,主存，IO设备，都挂在一组总线上，允许在总线上的设备直接交换信息。
		  不允许两个以上的部件在同一时刻向总线传输信息。（小型机）
		  
	3.4.2 多总线结构
		  双总线结构：将速度较低的I/O设备从单总线上分离出来，形成主存总线和IO总线分离的结构。（大中型机）
		  三总线结构：IO总线，DMA总线，主存总线。IO负责与CPU交换信息，DMA负责IO与主存交换信息，主存总线则负责CPU和主存交换信息。
		  			在三总线结构中，任意时刻只能使用一种总线，DMA 和 主存总线不能同时访问主存，IO总线只有在CPU执行I/O指令时才能用到。
		  
	3.4.3 总线结构（略）
		
3.5 总线控制
	总线控制的目的：由于总线上链接着多个部件，什么时候由哪个部件发送信息，如何给信息传递定时，
				 如何防止信息丢失，如何避免多个部件同时发送，如何规定接收信息的部件等一系列问题，
				 都需要由总线控制器统一管理。它主要包括判优控制和通信控制。
	3.5.1 总线判优控制：根据挂载在总线上的部件的优先级进行仲裁。
	3.5.2 总线通信控制：控制通信方式和通信时间。

第四章 存储器
4.1 概述
	在当今的计算机中，由于存储器要和CPU，以及IO设备直接通信，所以其地位越来越重要。
	4.1.1 存储器分类
		  按存储介质分类：（存储介质主要有半导体器件，磁性材料和光盘）半导体存储器，磁表面存储器，磁芯存储器，光盘存储器。
		  			  半导体存储器：存储元件由半导体器件组成的存储器称为半导体存储器。优点：体积小，功耗低，存取时间短。缺点：断电信息消失。
					  磁表面存储器：在金属或塑料机体的的表面上涂一层磁性材料作为记录介质，工作时磁层随载磁体高速运转，用磁头在磁层上进行读写操作，故称为磁表面存储器。
					  			  按载磁体的形状不同，可分为：磁盘，磁带，磁鼓（目前已经不采用）。磁表面物质按照剩磁状态的不同而区分0和1.而磁并不易失，所以，这种存储器有非易失性的特点。
					  磁芯存储器：目前已经不采用。
					  光盘存储器：利用激光在记录介质（磁光介质）上进行读写的存储器，非易失性，密度高，耐用性好，可靠性高和可互换性强等特点。越来越多被用于计算机系统。
					  
		  按存取方式分类：随机存储器，只读存储器，串行访问存储器。
		  			  随机存储器（RAM）：是一种可读写的存储器，特点是存储器的任何一个存储单元的内容都可以随机存取，而且存取时间与存储单元的物理位置无关。计算机主存都采用此种存储器。
					  只读存储器（ROM）：早期指只可写不可读MROM（掩磨），现在有PROM, EPROM, EEPROM, flash等，逐渐可编程，可擦除等。与RAM可以共同构成计算机的主存，不同的地址域。
					  串行访问存储器：对存储单元进行读写操作时，需按照其物理位置的先后顺序寻找地址。如磁带。
					  
		  按在计算机中的作用分类：主存储器，辅助存储器，缓冲存储器。
		  			  主存储器：可以与CPU直接交换信息。RAM 与 ROM 
					  辅助存储器：主存储器的后援存储器，存放暂时不用的程序和数据。不能与CPU直接交换信息。磁盘，磁带。
					  缓冲存储器：用在两个速度不同的部件之间。例如可以在CPU和主存之间设置缓冲存储器。
		  
	4.1.2 存储器的层次结构
		  存储器的三个重要性能指标：速度，容量，每位价格。
		  则层次结构如下：
		  				寄存器
						缓存
						主存
						辅存
		  说明：从上到下存取速度越来越低，容量越来越大，位价越来越小。CPU可以直接访问主存和缓存，辅存中的信息要映射到主存中才能被CPU访问。设置层次结构是为了中和速度，容量，和位价
		  	   之间的关系。
FLAG
4.2 主存储器
	4.2.1 概述
		  现代计算机，主存储器由存储体，读写电路，译码器，驱动器，数据线，地址线，读写控制器封装而成，而MAR和MDR封装在CPU中。当CPU需要读数据时，将数据的地址放在MAR里，发出读命令，
		  地址将被地址线传送给主存储器，经由译码器，驱动器，读电路，把数据读取之后传送给数据线。当CPU需要写数据时，将需要写的地址放在MAR里，发出写命令，然后存储器会自动写。
		
		  4.2.1.1 主存中存储单元地址的分配
		  每8位算做一个存储单元，每个存储单元都有地址，地址从0开始。
		
		  4.2.1.2 主存的技术指标
		  主要技术指标：存储容量和存储速度。
		  存储容量：存储二进制代码的总位数。存储单元个数×存储字长（一般为8位）
		  存储速度：用存取时间和存取周期来表示。现在MOS型存储器的存取周期可达100ns,TTL可达10ns.
		  存储器带宽：单位时间内存储器存取的信息量，单位字每秒。带宽决定了以存储器为中心的机器获得信息的传输速度，改善机器瓶颈的一个关键因素。
				    提高带宽的措施：缩短存取时间，增加存储字长，增加存储体。
		
	4.2.2 半导体存储芯片简介
		  基本结构：采用大规模集成电路制造工艺，在一个芯片内集成具有记忆功能的存储矩阵，译码驱动电路（用于翻译地址）和读写电路等。
		  		  存储芯片通过地址总线，数据总线和控制总线与外部连接。
		  译码驱动方式：线选法和重合法。目的就是找到存储地址所对应的存储芯片，存储芯片上的存储单元。
		  
	4.2.3 随机存取存储器
		  按照存储信息的原理不同分为：静态RAM(触发器原理寄存信息)和动态RAM（电容重放电原理寄存信息，需要定时刷新，以充电维持数据）。
		  
	4.2.4 只读存储器
		  PROM(可以一次性的编程)
		  
	4.2.5 存储器与CPU的连接
		  就是连接地址线，数据线，和控制线的注意事项。
		  
	4.2.6 存储器的校验
		  由于种种原因，在计算机运行时候，数据在存储器中可能出错，所以要配成汉明码的，汉明码具有纠错能力。
		  
	4.2.7 提高访存速度的措施(略)
	
4.3 高速缓冲存储器
	4.3.1 概述
		  利用程序访问的局部性原理，设置高速缓冲存储器在CPU和主存之间，提高整体速度。
		  
	4.3.2 cache主存地址映射
		  主存地址与cache地址的映射方式。
		  
	4.3.3 替换策略
		  没有命中时候的替换方式。

4.4 辅助存储器
	4.4.1 概述
		  配合主存，以中和速度和容量的关系。
		  
	4.4.2 磁记录原理和记录方式
		  磁介质被磁头磁化，读取时感应磁介质，完成写读。
		  
	4.4.3 硬磁盘存储器	  
	4.4.4 软磁盘存储器
		  软盘比硬盘便宜，速度慢，运行环境没有太多要求，可以换盘片。存储原理就是磁盘转，而磁头沿盘片半径方向移动或不移动，找到不同的磁道，进行读写。
	
	4.4.5 磁带存储器（略）
	4.4.6 循环冗余校验码（用来校验存储器上的数据，避免出错）
	4.4.7 光盘存储器（通过激光烧介质，或者磁光转换来记录，通过反射或光磁转换来读取。）
	
第五章： 输入输出系统
5.1 概述
	5.1.1 输入输出系统的发展概况
	早期阶段：IO设备直接和CPU交换信息，与CPU串行工作，并且接口都是特定的很难扩展。
	接口模块和DMA阶段：接口独立，主机采用了总线结构，IO设备之间以及IO和CPU之间并行工作，再后来出现DMA(direct memory access) 可实现设备与主存直接交换信息，这样不需要通过CPU
					增加了CPU和IO设备之间的并行程度。
	具有通道结构的阶段：DMA虽然可以实现IO设备与主存之间直接交换信息，但是当IO设备较多的情况下，若每个IO设备都配置DMA接口，不仅造成了成本浪费，并且还需要CPU管理多个IO设备同时访问
					 主存的冲突问题，一样占用CPU时间。于是后期出现了IO通道，通道用来负责管理IO设备以及实现主存与IO设备之间交换信息的部件，可以视为一种具有特殊功能的处理器，但是
					 并不是独立的处理器，其从属于CPU,在CPU控制下进行工作，IO设备可依赖通道和主存交换信息，不需要惊动CPU,提高效率。
	具有IO处理机的阶段：IO处理机基本独立于主机工作，可单独处理很多IO设备的工作，提高了IO系统和CPU的独立性。
	
	5.1.2 输入输出系统的组成
	输入输出系统由IO软件和IO硬件两部分组成。
	IO软件：输入输出系统软件的主要任务是将用户编制的程序或者数据输入到主机内（如磁盘数据输入到主存中），将运算结果输出给用户，实现输入输出系统与主机工作的协调。实现任务主要通过
		   IO指令和通道指令来完成，IO指令是CPU指令的一部分，用来控制IO系统，在有IO通道的系统中，CPU只控制通道的启停，查询等。一旦启动完毕，将由通道来代替CPU对IO系统的管理。
	IO硬件：IO系统的硬件是多种多样的，有通道和无通道，带接口，和不带接口硬件组成都不一样。
	
	5.1.3 IO设备与主机的联系方式
	IO设备与主机的联系方式主要包括CPU如何对IO设备编址，如何寻找IO设备号，信息传递是串行还是并行，联络时怎样知道彼此的状态，彼此之间物理连接方式等等。
	IO设备编址方式：主要有统一编址和不统一编址两种方式。
				  统一编址：就是将IO地址看作是存储器地址的一部分，就是划出一部分主存地址域，作为IO设备的地址，所有指令和访存指令相似。
				  不统一编址：IO地址和主存地址是分开的，所有对IO设备的访问必须有专用的IO指令。选择那一种编址方式，根据具体情况而定。
	
	设备寻址：每台设备都赋予一个设备号，因此，当要启动某一设备时，可由IO指令的设备码字段，直接指出该设备的设备号。通过接口电路中的设备选择电路，便可选中要交换信息的设备。
	传送方式：分串行和并行，当IO设备距离主机很远时，采用串行传送较为合理，并行速度比串行速度快，但是传送距离没有串行的远。
	联络方式：包括立即响应方式，异步工作采用应答信号联络，同步工作采用同步时标联络。
	与主机的连接方式：辐射式和总线式。
				   辐射式：一对一直接相连，计算机发展初期。
				   总线式：通过总线一对多连接IO设备，然后CPU控制总线，现代计算机大多数采用。
				   
	5.1.4 IO设备与主机信息传送的控制方式
	主要有以下几种方式：
	程序查询方式：由CPU通过程序不断查询IO设备是否已做好准备，从而控制IO设备与主机交换信息。这种方式使CPU和IO设备处于串行工作方式，CPU工作效率不高。
	程序中断方式：CPU启动IO设备后，不查询设备是否已准备就绪，继续执行自身程序，只有IO设备准备就绪并向CPU发送终端请求后才予以响应，这将大大提高CPU的工作效率。
	直接存储器存储方式（DMA）：在IO设备和主存之间，增加一条通路，不需要通过CPU而达到IO设备和主存交换信息的目的。即访问IO设备和主存交换信息时不需要中断CPU,若出现，CPU和IO设备同时
						   访问主存时，CPU总把总线占用权让给DMA。
	IO通道方式：为IO设备设置通道，类似于处理机，但不是处理机，基本独立于CPU控制IO系统。
	IO处理机方式：IO处理机更大程度上独立于CPU，处理和控制IO系统。

5.2 IO设备
	5.2.1 概述
		  中央处理器和主存构成了主机，除主机外的大部分硬件设备都可以称为IO设备或外部设备简称外设。IO设备内部由IO控制器和机，电，磁，光部件组成。
		  IO设备大致可以分为以下三类：
		  						 人机交互设备：实现操作者与计算机之间互相交流信息的设备，如鼠标，键盘，显示器，打印机等等。
								 计算机信息的存储设备：一般指辅助存储设备。
								 机机通信设备：用于实现计算机和计算机之间，计算机和其他系统之间交流通信的设备，如调制解调器等。
		  这里主要讲人机交互设备，分为输入设备和输出设备。
		  
	5.2.2 输入设备
		  输入设备用来完成输入程序、数据和操作命令等功能。
		  键盘：
		  鼠标：机械式和光电式。
		  触摸屏：电阻式（干净场合），电容式（公共场合），表面超声波式（复杂场合）
		  其他输入设备：光笔，画笔与图形板，图像输入设备。
		  
	5.2.3 输出设备
		  以可见光的形式传递和处理信息的设备称为输出设备。
		  显示器主要有阴极射线管显示器（CRT），液晶显示器（LCD），等离子显示器。
		  打印机分为击打式（点阵针式打印（逐行或逐字都可））和非击打式（激光（碳粉）打印机（逐页打印），喷墨打印机（逐字打印））。
		  
	5.2.4 其他IO设备
		  终端设备：键盘和显示器组成的能够将输入信息传送到远程机器，并将远程机器的结果传送回来。
		  A/D 与 D/A转换器：用于模拟信号和数字信号的相互转换。
		  汉字处理设备：
		  
	5.2.5 多媒体技术
		  所谓媒体是指信息传递和存储的最基本的技术和手段。把声音，图像，文字等融合在一起的技术，就是多媒体技术。
		  关键技术：
		  		  视频和音频数据的压缩和解压缩技术
				  多媒体专用芯片
				  大容量存储器
				  适用于多媒体技术的软件。

5.3 IO接口
	5.3.1 概述
		  接口可以看做是两个系统或两个部件之间的交接部分，它既可以是两种硬设备之间的连接电路，也可以是两个软件之间的共同逻辑边界。IO接口通常是指主机与IO设备之间设置的一个硬件电路
		  及其相应的软件控制。
		  
	5.3.2 接口的功能和组成
		  每一台IO设备都是通过IO接口挂到系统总线上的。IO总线包括数据线，设备选择线，命令线和状态线。
		  数据线：IO设备与主机之间数据代码的传送线，一般为双向的，也可以是单向的，但单向需要两组。
		  设备选择线：用来传送设备码的，它的根数取决于IO指令中设备码的位数。
		  命令线：传送IO命令
		  状态线：将IO设备的状态向主机报告的信号线。
		  
		  接口功能：选址功能，传送命令的功能，传送数据的功能，反映IO设备工作状态的功能。
		  
	5.3.3 接口类型
		  按数据传送方式分类：有并行接口和串行接口。
		  按功能选择的灵活性分类：可编程接口和不可编程接口。
		  按通用性分类：有通用接口和专用接口。
		  按数据传送的控制方式分类：程序型接口和DMA型接口。
		  
5.4 程序查询方式
	5.4.1 程序查询流程
		  先执行测试指令，测试IO设备是否准备就绪，就绪就执行传送指令，用来传送数据，未就绪就执行转移指令，转移到测试指令。
		  启动某个IO设备后，将把上面的步骤代码插入到现行程序中，直到完成传送，再继续执行现行程序，所以一般要先保存现行程序寄存器之中的数据。
		  
	5.4.2 程序查询方式的接口电路（略）
		  这种程序查询方式的联络方式会占用CPU,效率非常低，故一般并不会使用这种方式。

5.5 程序中断方式 
	5.5.1 中断的概念
		  计算机在执行程序的过程中，当出现异常情况或特殊请求时，计算机停止现行程序的运行，转向对这些异常情况或特殊请求的处理，处理结束后再返回到现行程序的间断处，继续执行源程序，
		  这就是中断。
		  
	5.5.2 IO中断的产生
		  总而言之，为了提高计算机的整机效率，为了应付突发事件，为了实时控制的需要，在计算机技术的发展过程中产生了中断技术。
		  
	5.5.3 程序中断方式的接口电路
		  为了实现中断， IO 接口电路必须配置以下硬件电路：
		  中断请求触发器和中断屏蔽触发器：请求触发器用于请求触发CPU中断，屏蔽触发器用来屏蔽本中断源中断请求。
		  排队器：既可以设置在CPU内部进行统一排队，也可以分别设置在IO接口电路中，进行链式排队。
		  中断向量地址形成部件（设备编码器）：通过该部件可以得知中断向量地址，然后根据中断向量地址找出对应的中断服务程序的入口地址。
		  
	5.5.4 IO中断处理过程
		  CPU发送启动IO设备命令-->接口启动IO设备开始工作-->输入设备将数据送入数据缓冲寄存器-->输入设备向接口发出，设备工作结束信号，标志设备准备就绪
		  -->当设备准备就绪，且本设备未被屏蔽，CPU在指令执行阶段的结束时刻，发出中断查询信号-->设备中中断请求触发器被设置为1,标志设备发出中断请求-->然后中断请求被送进排队器,进行判优
		  -->若CPU允许中断，设备又被排队选中，则进入中断响应阶段。-->由中断信号将排队送至编码器形成向量地址-->向量地址送至PC，作为下一条指令的地址
		  -->向量地址中存放的是一条无条件转移指令，指令执行结束后，转至服务程序入口地址，执行中断服务程序-->中断服务程序最后一条指令是中断返回指令，执行结束，将返回原程序的断点处。
		  
		  简单的归纳为：中断请求-->中断判优-->中断响应-->中断服务-->中断返回。
		  
	5.5.5 中断服务程序的流程
		  保护现场：中断服务程序的起始部分，将寄存器的内容存至存储器中或堆栈中保存。
		  中断服务：中断服务程序的主体部分，对于不同的中断请求源，其中断服务操作内容是不同的。
		  恢复现场：中断服务程序的结尾部分，要求在退出服务程序前，将原程序中断时的现场恢复到原来的寄存器中。
		  中断返回：中断服务程序的最后一条指令，返回断点处，继续执行原程序。

5.6 DMA 方式
	5.6.1 DMA方式的特点
		  DMA方式是在主存和IO设备之间通过DMA接口设置一条直接数据通路。这样IO设备与主存交换信息就不需要通过CPU，提高CPU效率。特别适合高速IO或赋存与主存之间的信息交换。
		  这种方式由于DMA接口与CPU共享主存，这就有可能出现二者争用主存的冲突，为了有效的分时使用主存，通常有三种方式：停止CPU访问主存，周期挪用，DMA与CPU交替访问。
		  
	5.6.2 DMA接口的功能和组成
		  功能有：
		  		向CPU申请DMA传送。
				在CPU允许DMA工作时，处理总线控制权的转交，避免因进入DMA工作而影响CPU正常活动或引起总线竞争。
				在DMA期间管理系统总线，控制数据传送。
				确定数据传送的起始地址和数据长度，修正数据传送过程中的数据地址和数据长度。
				在数据块传送结束时，给出DMA操作完成的信号。
		  组成有：
		  	    主存地址寄存器：用于存放主存中需要交换数据的地址。
				字计数器：用于记录传送数据的总字数，通常以交换字数的补码值预置。
				数据缓冲寄存器：用于暂存每次传送的数据。
				DMA控制逻辑：控制负责管理DMA的传送过程。
				中断机构：当字计数器溢出时，表示一批数据交换完毕，由溢出信号通过中断机构向CPU提出中断请求，请求CPU做DMA操作的后处理。
				设备地址寄存器：存放IO设备的设备码或设备信息存储区的寻址信息。
				
	5.6.3 DMA的工作过程
		  预处理阶段：在使用DMA接口之前，CPU需要先配置一下DMA，如指明数据传送方向，填充设备号，并启动设备，输入交换数据主存起始地址等。
		  数据传送阶段：预处理后，CPU会继续执行其他工作，DMA接口会准备一个字（输入时），然后向CPU申请总线使用权，CPU同意，DMA会把地址传送给地址总线，数据给数据总线，然后修改记录，直到
		  			 数据传送结束，向CPU发送结束中断请求。
		  后处理阶段： CPU得到中断请求，会停止原程序，执行中断服务程序，做一些DMA结束处理。如校验数据，或是否继续传输等。
		  
		  与程序中断方式相比，DMA方式有如下特点：
		  								  从数据传送看，程序中断方式靠程序传送，DMA方式靠硬件传送。
										  从CPU响应时间看，程序中断方式是在一条指令结束时相应，而DMA方式可在指令周期内的任一存取周期结束时响应。
										  程序中断方式有处理异常事件的能力，DMA没有，主要用于大批数据的传送如硬盘存取，图像处理，高速数据采集系统等。
										  程序中断方式需要中断程序，故需要保护现场，DMA不需要。
										  DMA的优先级比程序中断的优先级高。
	5.6.4 DMA的接口类型
		  选择型：物理上连接多个设备，实际传输时只能选择某一个，适合数据高速传输的设备。
		  多路型：物理上和实际上都能多路同时工作，多个IO设备交叉通过DMA传送数据。
	
第三篇：中央处理器
第六章 计算机的运算方法
计算机应用领域极其广泛，但不论其应用在什么地方，信息在机器内部的形式都是一致的，即均为0和1组成的各种编码。
6.1 无符号数和有符号数
	计算机中参与运算的数有两大类：无符号数和有符号数。
	6.1.1 无符号数
		  计算机中的数均存放在寄存器中，通常称寄存器的位数为机器字长。而所谓无符号数，即没有符号的数，在寄存器中的每一位均可用来存放数值。
		  而存放有符号数时候，则需要留出位置存放符号。
		  
	6.1.2 有符号数
		  机器数与真值：对于有符号数，符号的正负机器是无法识别的，用0表示正，1表示负，放在前面表示符号，这样把符号数字化的数称为机器数，而正常的符号数称为真值。
		  			  既然有了把符号位数字化的编码，就要考虑是否需要在计算的时候把符号位参与运算。这就和符号位和数值位所构成的编码有关，即原码，补码，反码，和移码。
					  
		  原码表示法：原码是机器数中最简单的一种表示形式，符号位为0,表示正数，符号位为1，表示负数。数值位即真值的绝对值，故又称为带符号的绝对值表示。
		  
		  补数的概念：只要确定了模，一个负数可以找到预知等价的正数。例如，模为12,那么与-2 等价的补数为10.
		  			所以补数的结论有：一个负数可用它的正补数来代替，而这个正补数可用模加上负数本身求得。
								  一个正数和一个负数互为补数时，它们绝对值之和即为模数。
								  正数的补数即该正数本身。
		  补码的定义：补码产生是为了方便计算机计算，减法可通过补码的方式用加法求得。即无论正数还是负数都用补码表示存放在机器中。
		  反码表示法：反码通常用来作为由原码求补码，或者由补码求原码的中间过渡。数值部分为原码的每位求反。
		  
		  三种机器数的特点归纳如下：
		  三种机器数的最高位均为符号位。
		  当真值为正时，原码，补码，和反码的表示形式都相同，即符号位都用0表示，数值部分与真值相同。
		  当真值为负时，原码，补码，和反码的表示形式不同。但其符号位都用1表示，而数值部分有这样的关系，补码是原码的求反加一，反码是原码的每位求反。
		  
		  已知补码求原码：先判断符号位，0表示为正数，1表示为负数，正数时，然后补码和原码一样。负数时，符号位取1, 数值为先取反再加一，得原码。
		  
		  切记：计算机存储补码的原因是把符号位和数值位可以统一管理，并且减法可通过加法实现。
		  
6.2 数的定点表示和浮点表示
	在计算机中，小数点不用专门的器件表示，而是按约定的方式标出，共有两种方法表示小数点的存在，即定点表示和浮点表示。定点表示的数称为定点数，浮点表示的数称为浮点数。
	6.2.1 定点表示
		  小数点位置固定，表示的数要么是纯小数或纯整数。这样的机器称为定点机，故当机器处理的数不是纯小数或纯整数时，必须乘上一个比例因子，否则会产生溢出。
	6.2.2 浮点表示
		  浮点数即小数点的位置可以浮动的数，即科学表示法，N = S × 2^j , S为尾数，j为阶码。
		  浮点数的表示形式：阶符+阶码+数符+数码
		  				阶码是整数，阶符和阶码的位数合起来反映浮点数的表示范围及小数点的实际位置。
						尾数是小数，其位数n反映了浮点数的精度，尾数的符号代表浮点数的正负。
		  为了提高浮点数的精度，其尾数必须为规格化数。当基数为2时，尾数最高位为1的数为规格化数。
		  
	6.2.3 定点数和浮点数的比较
		  浮点数在表示范围，精度方面都优于定点数，但是运算线路等都比较复杂。
		  
	6.2.5 IEEE 754标准

6.3 定点运算
	6.3.1 移位运算
		  算术移位时，机器数为正数时候，不论是左移还是右移，添补代码均为0. 而负数时候，原码数值部分与真值相同，故符号位不变空位填0.反码则符号位不变空位填1.
		  而操作移位的时候，实际上操作的是补码，补码左移添0,右移添1.
		  
		  有符号数的移位为算术移位，无符号数的移位为逻辑移位。
	6.3.2 加法与减法运算
		  现代计算机采用补码的形式进行加法和减法运算。统一了符号问题。
		  
	6.3.3 乘法运算
		  乘法可通过移位和加法实现，也可以通过特殊的乘法电路进行。
		  
	6.3.4 除法运算
		  软件加硬件实现除法运算。
		  
	总结：主要需知道，运算是通过底层电路逻辑进行的，如加法器，乘法器等，移位操作正负空位填的值不一样。

6.4 浮点四则运算
	6.4.1 浮点加减运算
		  对阶-->尾数求和-->规格化-->舍入-->溢出判断。
		  
	6.4.2 浮点乘除法运算
		  阶码运算-->尾数相乘-->规格化-->舍入处理
		  
	6.4.3 浮点运算所需的硬件配置
		  阶码运算部件：用来完成阶码加减，以及控制对阶时，小阶的尾数右移次数和规格化时对阶码的调整。
		  尾数运算部件：用来完成尾数的四则运算以及判断尾数是否已规格化，此外，还需有判断运算结果是否溢出的电路。

6.5 算术逻辑单元
	针对每一种算术运算，都必须有一个相对应的基本硬件配置，其核心部件是加法器和寄存器。当需要完成逻辑运算时，势必需要配置相应的逻辑电路，
	而ALU电路是既能完成算术运算又能完成逻辑运算的部件。
	6.5.1 ALU电路
	略
	6.5.2 快速进位链
	略
	
第七章 指令系统
7.1 机器指令
	机器语言是由一条条语句构成的，每一条语句又能准确表达某种语义。它可以命令机器做某种操作，指出参与操作的数或其他信息在什么地方。
	计算机就是连续执行每一条机器语句而实现全自动工作的。
	人们习惯把每一条机器语言的语句称为机器指令，而又将全部机器指令的集合称为机器的指令系统。因此机器的指令系统集中反映了机器的功能。
	计算机设计者主要研究如何确定机器的指令系统，如何用硬件电路，芯片，设备来实现机器指令系统的功能。计算机的使用者则是依据机器提供的指令系统，
	使用汇编语言来编制各种程序。
	计算机的使用者根据机器指令系统所描述的机器功能，能很清楚的了解计算机内部寄存器-存储器的结构，以及计算机能直接支持的各种数据类型。
	7.1.1 指令的一般格式
	  	  指令是由操作码和地址码两部分组成。
	  	  操作码：用来指明该指令所要完成的操作，如加法，减法，传送，移位，转移等。操作码的长度可以是固定的也可以是变化的。
	  	  地址码：用来指出该指令的源操作数的地址（一个或两个），结果的地址以及下一条指令的地址。这里的地址可以是主存的地址，也可以寄存器的地址，甚至可以是IO设备的地址。
	  		     地址的数量是不固定的，不同机器不一样，有的是四地址指令，3,2,1,0 都有，减少的地址数，只会由其他来代替，如PC，ACC寄存器等。
	7.1.2 指令字长
		  指令字长取决于操作码的长度，操作数地址的长度和操作数地址的个数。不同机器的指令字长是不相同的。但一般都是8的倍数。
		  早期指令字长和机器字长，存储字长都相等，随着存储容量的增大，要求处理的数据类型增多，计算机的指令字长也发生了很大的变化。一台机器的指令系统可以采用位数不相同的指令。

7.2 操作数类型和操作类型
	7.2.1 操作数类型
		  机器中常见的操作数类型有：
		  地址：地址实际上也可看作是一种数据，在许多情况下要计算操作数的地址。这时地址可被看作是一个无符号的整数。
		  数字：常见的数字有定点数，浮点数，和十进制数。
		  字符：文本和字符串也是一种常见的数据类型，但是计算机处理信息过程中，不能以简单的字符形式存储和传送。因此普遍采用ASCII码。
		  逻辑数据：计算机除了作算术运算外，有时还需作逻辑运算。此时n个0和1的组合不是被看作算术数字，而是被看作逻辑数。
		  
	7.2.2 数据在存储器中的存放方式
		  为了提高计算机的存取效率，要求多字节数据在计算机中存放满足边界对准。编程中的字节对齐就是这个原因。
		  
	7.2.3 操作类型
		  不同的机器，操作类型也是不同的，但几乎所有机器都有以下几类通用的操作。
		  数据传送：包括寄存器与寄存器之间，寄存器与存储单元，存储单元与存储单元之间的传递。如从源到目的之间的传送，对存储器读和写，交换源和目的的内容，置1,清0,进栈，出栈等。
		  算术逻辑操作：这类操作可实现算术运算，和逻辑运算，
		  移位：算术移位，逻辑移位，和循环移位等。移位操作经常被用来代替简单的乘法和除法运算。
		  转移：在多数情况下，计算机是按顺序执行程序的每条指令的，但有时需要改变这种顺序，此刻可使用转移类指令来完成。转移有无条件转移，有条件转移，调用与返回，陷阱与陷阱指令（处理意外）
		  输入输出：从IO输入到CPU的寄存器，或从CPU的寄存器输出到IO的一些指令。
		  其他：还有一些等待指令，停机指令，空操作指令，开中断指令，关中断指令，置条件码指令等。
		  
7.3 寻址方式
	寻址方式是指确定本条数据的数据地址，以及下一条将要执行的指令地址。它与硬件的结构密切相关，而且直接影响指令格式和指令功能。
	寻址方式分为指令寻址和数据寻址两大类。
	
	7.3.1 指令寻址
		  分为顺序寻址和跳跃寻址。
		  顺序寻址：可通过程序计数器PC加1,自动形成下一条指令的地址;跳跃寻址则通过转移类指令实现。
		  
	7.3.2 数据寻址
		  数据寻址种类较多，在指令字中，必须设一字段来指明属于哪一种寻址方式。指令的地址码字段通常都不代表操作数的真实地址，把它称为形式地址。
		  操作数的真实地址称为有效地址。它是由寻址方式和形式地址共同确定的。
		  
		  立即寻址：操作数本身设在指令字内，即形式地址A不是操作数的地址，而是操作数本身，又称之为立即数。
		  直接寻址：指令字中的形式地址就是操作数的真实地址。
		  隐含寻址：指令中不明显指定，操作数的地址隐含在某个根据操作而固定的寄存器中。
		  间接寻址：给出存储有效地址的存储单元的地址。
		  寄存器寻址：给出寄存器的编号。寄存器中存储的是操作数。
		  寄存器间接寻址：给出寄存器编号，但是寄存器中存储的是有效数的存储单元地址。
		  基址寻址：需设置基址寄存器，有效地址为形式地址和基址寄存器相加。
		  变址寻址：与基址寻址类锡，有效地址为形式地址和变址寄存器相加。
		  相对寻址：有效地址为形式地址和PC寄存器中的内容相加。
		  堆栈寻址：利用堆栈的特性，隐含操作数的地址。
		  
7.4 指令格式举例
	7.4.1 设计指令格式应考虑的各种因素
		  主要考虑，操作类型，数据类型，指令格式（包括指令字长，操作码位数，地址码位数，地址个数，寻址方式类型以及指令字长和操作码位数是否可变。）寻址方式，寄存器个数。
		  
	7.4.2 指令格式举例
		  略
	7.4.3 指令格式设计举例
		  略
		  
7.5 RISC 技术
	RISC：reduced instruction set computer 精简指令系统计算机。 与 CISC：complex instruction set computer 复杂指令系统计算机。
	7.5.1 RISC 的产生和发展
		  一开始都是用CISC，并且随着超大规模集成电路的缠身，开始通过硬件实现更复杂的功能，即CISC，造价和占用芯片面积开始怎加，于是出现了RISC，
		  RISC在我理解就是用硬件实现一部分经常会使用到的指令，并且要求尽可能短，然后复杂的功能则通过这些简单的指令实现，即复杂指令通过上层软件实现。
		  
	7.5.2 RISC 的主要特征
		  主要特点：
		  		 选取使用频度较高的一些简单指令以及一些很有用但又不复杂的指令，让复杂指令的功能由频度较高的简单指令的组合来实现。
				 指令长度固定，格式种类少，寻址方式种类少。
				 只有取数和存数指令访问存储器，其余指令的操作都在寄存器内完成。
				 CPU中有多个通用寄存器。
				 采用流水线技术，大部分指令在一个时钟周期内完成。采用超标量和超流水线技术，可使每条指令的平均执行时间小于一个时钟周期。
				 控制器采用组合逻辑控制，不用微程序控制。
				 采用优化的编译程序。
		  
	7.5.3 RISC 和 CISC 的比较
		  RISC优点：
		  充分利用VLSI芯片的面积
		  提高计算机运算速度
		  便于设计，可降低成本，提高可靠性
		  有效支持高级语言程序。
		  
第八章 CPU的结构和功能
8.1 CPU的结构
	8.1.1 CPU的功能
		  CPU实质上包括运算器和控制器两大部分，第六章讨论了计算机的各种运算，下面直接讨论控制器。
		  控制器负责协调并控制计算机各部件执行程序的指令序列，其基本功能是取指令，分析指令和执行指令。
		  取指令：控制器必须具备自动从存储器中取出指令的功能，即形成指令地址，并把指令取到控制器中，第一条指令可以人为或者系统指定。
		  分析指令：分析指令要完成什么操作和操作数的有效地址。
		  执行指令：根据分析所得到的操作和操作数地址，形成控制信号序列，通过对运算器，存储器，IO设备的操作来完成每条指令的执行。
		  
	8.1.2 CPU的结构框图
		  根据CPU的功能，不难设想，取指令，必须有盛放指令的寄存器，要分析指令要有寄存器和译码器，要执行指令，必须有一个发出
		  各种操作命令序列的控制部件CU,要完成算术运算和逻辑运算，必须有存放操作数的寄存器和实现算逻运算的部件ALU，为了处理异常需要有中断系统。
		  可见CPU由四个部分组成：CU， ALU， 寄存器， 中断系统。
		  
	8.1.3 CPU的寄存器
		  CPU中的寄存器大致分为两类：
		  用户可见寄存器：用户可对此类寄存器编程，以及通过优化使CPU，因使用这类寄存器而减少对主存的访问次数。
		  控制和状态寄存器：用户不可对此类寄存器编程，它们被控制部件使用，以控制CPU的操作，也可被带有特权的操作系统使用，从而控制程序的执行。
		  
		  用户可见寄存器又可按其特征分类为：通用寄存器，数据寄存器，地址寄存器，条件码寄存器。
		  							  通用寄存器：通用的，功能可以被程序员所指定，可用来存放操作数，也可以作为满足某种寻址方式所需的寄存器。
									  数据寄存器：用于存放操作数，其位数应该满足多数多数数据类型的数值范围。
									  地址寄存器：地址寄存器用于存放地址，其本身可以具有通用性，也可用于特殊的寻址方式，地址寄存器的位数必须足够大，以满足最大的地址范围。
									  条件码寄存器：用于存放测试条件码。
									  
		  几个控制和状态寄存器：MAR， MDR， PC， IR
		  					MAR:存储地址寄存器，用于存放将被访问的存储单元的地址。
							MDR：存储器数据寄存器，用于存放欲存入存储器中的数据，或最近从存储器中读出的数据。
							PC： 程序计数器，存放现行指令的地址，通常具有计数功能，当遇到转移类指令时，PC的值可被修改。
							IR： 指令寄存器，存放当前欲执行的指令。
	8.1.4 控制单元和中断系统
		  控制单元（CU）：是提供完成计算机全部指令操作的微操作命令序列部件。
		  中断系统：主要用于处理计算机的各种中断。
	
8.2 指令周期
	8.2.1 指令周期的基本概念
		  CPU每取出并执行一条指令，所需的全部时间，称为指令周期，也即CPU完成一条指令的时间。由于各种指令操作功能不同，因此各种指令的指令周期是不相同的。
		  一个完整的指令周期又分为四个阶段：取指阶段，间指阶段，执行阶段，中断阶段。其中间指阶段只有执行的指令是间接寻址时，才会出现，而中断阶段实际上是
		  检查是否有IO中断信号，所以也不一定存在于指令周期中。
		  
	8.2.2 指令周期的数据流
		  取指周期：PC中存放现行指令的地址，该地址送到MAR，然后送到地址总线，然后由控制部件CU向存储器发读命令，使对应MAR所指单元的内容（指令）经数据总线送至MDR，
		  		  再送至IR，并且CU控制PC内容加1，形成下一条指令的地址。
		  间址周期：一旦取指周期结束，CU便检查IR中的内容，以确定其是否有间址操作，如果需要间址操作，则MDR中指示形式地址将被送到MAR中，又送到地址线，然后由控制器向存储器
		          发出读指令，以获取有效地址并存至MDR。
		  执行周期：不同操作，执行周期不同。
		  中断周期：由CU把用于保存程序断点的存储器特殊地址送往MAR，并送到地址总线上，然后由CU向存储器发写命令，并将PC的内容（程序断点）送到MDR，最终使程序断点经数据线存入存储器。
		  		  CU还需将中断程序的入口地址送至PC，为下一个指令周期的取指周期做好准备。

8.3 指令流水
	为了提高处理机速度，通常可从提高器件的性能和改进系统的结构，开发系统的并行性两方面入手。
	而所谓并行性，包含同时性和并发性两个方面，前者指两个或多个事件在同一时刻发生，后者是指两个或多个事件在同一时间段发生，只要时间上有重叠，就有并行性可能。
	而计算机体系来看，并行性分为粗粒度并行性和细粒度并行性，粗粒度并行性就是用多个处理机处理多个进程，而细粒度并行性指处理机内部的操作级和指令级的并行性。
	其中指令的流水作业就是一项重要的技术。
	
	8.3.1 指令流水原理
		  将指令的执行过程细化为几个步骤，在相互不影响的情况下，进行并行运行，达到时间上有重叠的并行处理效果，从而提高处理机的效率。由于这种方式的原理和现实生活中的流水线
		  很相像，只是处理的是指令，所以叫指令流水。
		  
	8.3.2 影响流水线性能的因素
		  影响流水线性能的因素主要有：
		  结构相关：当指令在重叠执行过程中，不同指令争用同一功能部件产生资源冲突时产生的，故又有资源相关之称。
		  数据相关：当指令在重叠执行过程中，后继指令需要用到前面指令的执行结果时发生的。
		  控制相关：主要有转移指令引起的。
		  
	8.3.3 流水线性能
		  衡量流水线性能主要有以下几个方面：
		  吞吐率：在指令流水线中，吞吐率是指单位时间内流水线，所完成指令或输出结果的数量。吞吐率有最大吞吐率和实际吞吐率之分。
		  加速比：m段流水线的速度与等功能的非流水线的速度之比。
		  效率：流水线各功能段的利用率。
		  
	8.3.4 流水线中的多发技术
		  超标量技术：指在每个时钟周期内，可同时并发多条独立指令，即以并行操作方式将两条或两条以上指令编译并执行。
		  			该技术要求处理机中配置多个功能部件和指令译码电路，以及多个寄存器端口和总线，以便能同时实现多个操作，
					此外还需要编译程序决定哪几条相邻指令可以并行执行。
		  超流水线技术：将流水线寄存器，插入到流水线段中，好比将流水线段再分段。这需要靠编译程序优化。
		  超长指令字技术：和超标量技术一样，都采用多条指令在多个处理部件中处理，但是其是通过比编译器先找到多个指令的并行性，然后把多个指令合成一个长的带多个操作数的
		     		   长指令，然后用这个长指令调用多个部件，实现并行性。
		  
	8.3.5 流水线结构
		  指令流水线结构：是将指令的整个执行过程用流水线进行分段处理。其对机器的改善程度取决于把处理过程分解成多少个相等的时间段数。
		  运算流水线：把不同的运算在部件级别进行流水线处理，比如一个乘法运算，可以分成不同的步骤，形成运算流水线。
		  流水线技术在不同的情况，改善的幅度并不同，所以要不要采用流水线技术，要根据具体情况而定。
	
8.4 中断系统
	前面章节了解了IO中断，但是IO中断只是CPU众多中断的一种。
	8.4.1 概述
		  CPU除了IO中断，还有其他的一些中断，中断的应用主要是为了提高计算机效率，为了处理一些异常情况以及实时控制，多道程序和多处理机的需要。
		  引起中断的因素主要可分类为：
		  						人为设置的中断：又称为自愿中断，因为它是在程序中人为设置的，故一旦机器执行这种人为中断，便自愿停止现行程序而转入中断处理。
								程序性事故：如定点溢出，浮点溢出，操作码不能识别，除法中出现非法等。
								硬件故障：如插件接触不良，通风不良，电源掉电，磁表面损坏等。
								IO设备：IO设备被启动后，一旦准备完毕，将向CPU发送中断。
								外部事件：如用户通过键盘来中断现行程序，属于外部时间中断。
								有些中断是可以屏蔽的，有些则必须处理。
	8.4.2 中断请求标记和中断判优逻辑
		  中断请求标记：为了判断是哪个中断源提出请求，在中断系统中必须设置中断请求标记触发器，简称中断请求触发器。其状态为1时，表示中断源有请求，触发器可以设置在CPU内部，也可以
		  			 分散在各个接口电路内。
		  中断判优逻辑：任何一个中断系统，在任一时刻，只能响应一个中断源请求。但许多中断源提出请求都是随机的，当某一时刻有多个中断源提出请求时，中断系统必须按其有限顺序予以相应，
		  			  这称为中断判优。各中断源的优先顺序是根据中断源若得不到及时响应，致使机器工作出错的严重程度而定的。
					  中断判优可用硬件实现也可用软件实现。
					  硬件排队：利用排队器和与非门，当优先级高的有中断时，就会封住优先级底的中断。
					  软件排队：利用软件查询方法，按优先级从高到底查询设备。
		  
	8.4.3 中断服务程序入口地址的寻找
		  由于不同的中断源对应不同的中断程序，故准确找到服务程序的入口地址是中断处理的核心问题，通常有两种方法寻找入口地址：硬件向量法和软件查询法。
		  硬件向量法：利用硬件产生向量地址，再由向量地址找到中断服务程序的入口地址。速度快，并且广泛应用。
		  软件查询法：利用软件跳转查询的方法，速度慢，应用少。
		  
	8.4.4 中断响应
		  响应中断的条件：中断触发器被设置为1
		  响应中断的时间：一般在每条指令的结束时进行相应，也有因为指令执行过长，而在指令执行过程中设置的查询断点，进行查询中断并处理。
		  中断隐指令：保护程序断点，寻找中断服务程序的入口地址，关中断。
		  
	8.4.5 保护现场和恢复现场
		  保护现场：包括保护程序断点和保护CPU内部各寄存器内容的现场两个方面。
		  恢复现场：在中断返回前，必须将寄存器的内容恢复到中断处理前的状态，这部分工作也由中断服务程序完成。
	8.4.6 中断屏蔽技术
		  中断屏蔽技术主要用于多重中断。
		  多重中断的概念：当CPU正在执行某个中断时候，又来了一个中断，CPU保存当前中断，去执行刚来的中断，这就是多重中断，也称为中断嵌套。
		  实现多重中断的条件：提前设置开中断，优先级别高的中断源有权中断优先级别低的中断源。
		  屏蔽技术：就是CPU可以利用屏蔽技术，不接受某个某种中断。
	
第四篇 控制单元
第九章：控制单元的功能
9.1 微操作命令的分析
	控制单元具有发出各种微操作命令（即控制信号）序列的功能。下面按指令周期的四个阶段分析其对应的微操作指令。
	9.1.1 取指周期
		  取指周期微操作过程：
		  				  PC-->MAR     :将当前指令地址送至存储器地址寄存器。
						  1--->R	   :向存储器发出读指令。
						  M(MAR)-->MDR :存储器读出对应地址的值送到数据寄存器。
						  MDR--->IR    :把指令从数据寄存器送到当前指令寄存器。
						  OP(PC)-->CU  :将指令的操作码送到CU进行译码。
						  (PC)+1-->PC  :PC加一形成下一条指令的地址。
	9.1.2 间址周期
		  间址周期完成取操作数有效地址的任务，操作如下：
		  										Ad(IR)-->MAR :取出当前指令的形式地址送到存储器的地址寄存器。
												1------->R   :向存储器发出读指令
												M(MAR)-->MDR :存储器读数据并送到数据寄存器
												MDR--->Ad(IR):将数据寄存器的值放到当前指令的地址段寄存器。
	9.1.3 执行周期
		  不同的指令，执行周期微操作是不同的，略。
		  
	9.1.4 中断周期
		  中断周期是指令结束后开始的，具体操作如下：
		  									0--->MAR   :将特定地址送到存储器地址寄存器，该地址用于存储现场。
											1--->W	   :向存储器发出写命令。
											PC-->MDR   :将PC寄存器中的数据送至存储器数据寄存器。
											MDR->M(MAR):将数据寄存器中的值写道对应地址。
										向量地址--->PC   :将形成的中断处理入口地址送到PC寄存器。
											0---->EINT	:关中断。

	上述所有操作都是在控制器的控制下完成的。
	
9.2 控制单元的功能
	9.2.1 控制单元的外特性
		  所谓外特性就是控制单元外部的输入和输出信号类别：
		  输入信号有：
		  			时钟：为了使控制单元按一定的先后顺序，一定的节奏发出各个控制信号，控制单元必须受时钟控制，
						 即每一个时钟脉冲使控制单元发送一个操作命令，或发送一组需要同时执行的操作命令。
					指令寄存器：现行指令的操作码，是控制器的输入信号。
					标志：控制器需要判断的标志。
					来自系统总线（控制总线）的控制信号：如中断或DMA请求。
					
		  输出信号有：
		  			CPU内的控制信号：CPU内寄存器之间的传送和控制ALU实现不同的操作。
					送至系统总线（控制总线）的信号：命令主存或IO读写等。
	9.2.2 控制信号举例
		  略
	9.2.3 多级时序系统
		  机器周期：所有指令执行过程中的一个基准时间，机器周期取决于指令的功能及器件的速度。因此通常以访问一次存储器的时间定为基准时间较为合理。
		  时钟周期：在一个机器周期里可完成若干个微操作，每个微操作都需要一定的时间，可用时钟信号来控制产生每一个微操作命令，时钟就好比计算机的心脏，
		          只要接通电源，计算机内部就会产生时钟信号，时钟信号的频率就是CPU的主频，每个时钟周期内可完成一个或几个需同时执行的操作。是控制计算机操作的最小时间单位。
		  一个指令周期包含若干个机器周期，一个机器周期又包含若干个时钟周期。
	9.2.4 控制方式
		  控制单元控制一条指令执行的过程实质上是依次执行一个确定的微操作序列的过程。略
	9.2.5 多级时序系统实例分析
		  略

第十章：控制单元的设计
	  略
附录 PC整机介绍：只读。略。

	
	
	
	
	
	
	
	























