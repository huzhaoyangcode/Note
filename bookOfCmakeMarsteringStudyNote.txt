CMake 学习笔记

一：写在前面的话
1.1 为什么要学cmake?
大型C/C++项目都是由cmake来做构建管理器，了解cmake,对了解整个项目的框架很有帮助，而框架对了解一个大型程序的重要
性不言而喻。
1.2 达到什么样的学习目标？
理解cmake的工作机制，能读懂大型程序的CMakeLists.txt，会写CMakeLists.txt,学习到最后要读懂mediapipe的CMakeList.txt
还有C++的标准库的CMakeLists.txt
1.3 怎样学？
以经典书籍，Mastering+CMake为参考，边读边做笔记边对着项目看。
看完整本书籍之后，用自己的语言组织起来写专题博客。
1.4 学习计划
每一个星期至少学6个番茄闹钟的时间的CMake.
1.5 学习打卡
2019/5/26 

二：笔记开始
日期：2019/5/26（2）
cmake 是一个用C++编写的跨平台的构建管理器（build manager），通过解析用户编写的CMakeLists.txt生成不同平台所需要的构建文件
如linux平台的Makefile.其比老一代的autoconf有很多优势。
2.3 cmake的基础用法和语法
cmake控制的构建过程是由编写CMakeLists.txt文件而完成的，每一个相关的文件夹下都需要有一个CMakeLists.txt文件，
这些文件由cmake的一些简单命令组成，命令的形式是command(args...), command是命令的名字，args是由空白字符分割开
的参数列表。版本2.2及以后的cmake命令名可以用大写也可以用小写.
cmake 支持简单的变量，可以包含字符串或字符串列表，引用变量使用${VAR}的形式。
cmake 可以直接访问系统的环境变量，语法为：$ENV{VAR} 例如：$ENV{HOME}
2.4 helloword sample
简单版本：
project(Hello)
add_executable(hello hello.c)
解释：project 注册一个项目名，add_executable表示用什么源文件生成目标文件，以及生成的目标文件的名字，
项目名和目标名是没有关系的，可以写成不一样的值。

日期：2019/5/27(0.2)
复杂版本：
cmake_minimum_requied(2.6)
project(Hello)

set(HELLO_SRC hello.c file2.c file3.c)
if(WIN32)
	set(HELLO_SRC ${HELLO_SRC} WinSupport.c)
else
	set(HELLO_SRC ${HELLO_SRC} UnixSupport.c)
endif()

add_executable(hello ${HELLO_SRC})

#look for the tcl library
find_library (TCL_LIBRARY 
NAMES tcl tcl84 tcl83
PATHS /usr/lib /usr/local/lib
)

if(TCL_LIBRARY)
	target_link_library(hello ${TCL_LIBRARY})
endif()

解释:set 可以用来设置变量，这里设置了一个string列表，后面又根据不同平台追加了不同的支持文件。
#开头的是注释，将被cmake忽略。find_library命令查找库，给了查找的名字，以及查找的路径。

日期：2019/05/28
2.5 运行cmake
cmake既支持内部编译也支持外部编译;
内部编译就是在源文件夹下进行编译，这样编译产生的文件就会在源文件夹下，比较乱，有删除源文件的风险。
外部编译就是专门建立一个文件夹，然后在这个文件夹下进行编译。

cmake 还有ccmake cmake-gui cmake -i(交互模式新版本已经不支持)等模式,交互式的形式进行配置,一般大项目用交互式比较方便.
cmake 在用参数的时候要用-D标志如-DCMAKE_BUILD_TYPE指定编译的类型.
为cmake指定编译器的方法：1.直接指定-DCMAKE_CXX_COMPILER -DCMAKE_C_COMPILE 命令行参数 2.设置环境变量 export CC=/usr/gcc CXX=/usr/g++ 
为指定编译器或链接器指定参数：LDFLAGS CXXFLAGS CFLAGS 分别指定链接器和C++和C编译器的参数.

查看项目的依赖信息：
用cmake作为构建管理器的项目,当用cmake初始化之后,会在每一个生成目标文件的地方生成如下四个文件,这四个文件用于记录项目的依赖以及更新.
depend.make	:存储了每一个.o文件依赖的文件的信息
flags.make	:包含了用于文件的编译选项
build.make	:构建规则
DependInfo.make	:依赖库信息

由于cmake兼顾更新依赖的任务，所以在运行cmake产生的Makefile时候,必须能随时运行cmake.

第三章 主要概念
3.1 cmake的主要结构
cmake主要的概念有目标文件(target),生成器(generator),命令(command);这些概念都是使用C++的类实现的,并被命令引用.
cmake的管理对象是源文件,由源文件生成目标文件.目标文件就是可执行文件或库.源文件会分为不同的目录,只要用于生成目标文件的目标文件夹都会包含一个CMakeLists.txt的文件,
cmake的在工作的时候会在每个目录下产生一个生成器,称为本地生成器,用于生成Makefile和项目文件,多个本地生成器共享一个全局生成器,全局生成器会被cmake调用用于操控整个
生成工程.
cmake运行机制：
cmake执行的时候会先生成一个cmake类对象实例,这个实例会管理整个配置过程,以及盛放所有的构建信息,如缓存值等. cmake做的第一件事是根据用户的选择来创建一个全局生成器,是Unix的
Makefile，还是visual studio 10.然后cmake 会把控制权交给这个全局生成器.
全局生成器负责项目的配置和Makefile的生成,在生成Unix的Makefile的过程中,全局生成器会为每一个源文件中的参加编译的子文件夹生成一个本地生成器,本地生成器会生成本文件夹下的Makefile
全局生成器只负责协调这些由本地生成器生成的Makefile,然后生成最顶层的Makefile.
每个本地生成器都包含一个cmMakefile类实例,这个实例就像是一个结构体一样,用父文件夹的一些参数进行初始化，然后在解析本文件夹下的CMakeList.txt文件时进行填充。
解析CMakeList.txt的命令是根据命令在本文件中出现的次序而逐步解析。
每个命令都是一个单独的类，这个类包含两部分，第一是初始化传递方法，第二就是终止传递方法，说白了就是构造和析构函数。构造函数接受参数和本文件夹下的CmMakefile的实例，
然后调用cmMakefile类的方法来处理参数，然后把结果记录到cmMakefile实例中.第二个方法要整个项目所有的命令都执行完毕才会被执行，一般的命令都没有这个方法。
当所有的CMakeLists文件被处理，生成器就会根据存储在cmMakefile中的信息生成目标文件，如makefile.

总结：cmake 就是一个程序,它会解析CMakeList.txt然后生成Makefile.经过我的测试发现,cmake解析顺序是根据最顶层的CMakeList.txt中出现的语句顺序进行的,
解析的数据会存储起来,当所有的数据都解析完毕之后,将会配置和生成Makefile.

日期：2019/05/30
3.2 目标文件
目标文件代表可执行的文件,库等.每调用一个add_library和add_executable就会产生一个目标文件.例如：
add_library(foo STATIC foo.c foo2.c) 用来产生一个静态库, foo就是静态库的名字,该指令会在需要的时候扩展库名,所以没必要写全,在此会扩展为libfoo.la, 使用此命令后,
添加的目标文件名，在整个cmake 项目中都是可以使用的，是全局的。
库的类型有STATIC SHARED MODULE, 表示静态库, 动态库, 模块. 其中在linux系统下模块和动态库效果是一样的.若未指定类型默认构建静态库.
设置目标文件的属性使用set_target_properties 和 get_target_properties.或者是set_property 和 get_property 常设置的属性就是目标文件的LINK_FLAGS,这个属性用来指定链接标志.
为目标文件添加依赖库的命令是target_link_libraries,可以添加静态或动态链接库.

日期：2019/06/3
3.3 源文件
源文件一般会记录文件名和扩展以及属性,属性可以用set_source_files_properties 和 get_source_file_property命令设置或获取,常用的的属性有：
COMPILE_FLAGS : 为文件增加编译属性或查看文件的编译属性
GENERATED	：标明这个文件是编译的时候产生的,所以可能第一次运行CMake的时候不存在该文件
OBJECT_DEPENDS ：增加可选的依赖文件。
LAGUAGE: 文件的编写语言,例如CXX

3.4 目录,生成器,测试,属性
属性是一组键值对,是C++类的特点,这些类包括目标文件,源文件,目录,生成器等.设置这些属性除了专用的set_target_properties和set_source_files_properties等接口,
还有通用的set_property和get_property属性,一些常用的目录的属性有：
ADDITIONAL_MAKE_CLEAN_FILES	:设置当前目录下在执行make clean的时候clean这些文件.
EXCLUDE_FROM_ALL :如果指定了该属性，被指定的目录中的目标文件就不会自动生成。

3.5 变量和缓存
cmake的变量是用set来定义的,使用的时候${VAR}, if的时候用VAR, 作用域是当前cmakelist.txt文件,按定义的顺序决定,函数中不用PARENT_SCOPE的时候是不会修改变量值的。
set(test 2 PARENT_SCOPE) 修改test的值,修改父范围的test。
变量可以存储一个值，也可以存储一个列表。
缓存是用来暂存一些用户的选择以方便下次运行cmake的时候，不需要用户重新键入或重新计算一些选项. 这些缓存的值一般会存储到构建文件夹的CMakeCache.txt中.所以在构建的时候
如果重新设置了option或者修改了一些环境则需要删除这个文件，然后再运行cmake进行配置。
在cache中建立变量的方法有option 或 set.
option用来建立一个Boolean类型的选项。用法如下：
option(<option_variable> "help string describing option" [initial value])
不指定初始化值默认为OFF
cache 中变量的类型有BOOL PATH(有界面的) FILEPATH(有界面的) STRING;option 用来专门指定bool类型的值,而set可以申请所有类型，用法如下：
set(<variable> <value> [[CACHE <type> <docstring> [FORCE]] | PARENT_SCOPE])

3.6 构建配置
cmake支持的构建类型有Build Release MinSizeRel RelWithDebInfo;
命令行指定配置-DCMAKE_BUILD_TYPE

4.1 cmake语法
cmake是的运行是由CMakeList.txt来控制的, 在写CMakeList.txt的过程中有如下语法：
1:#开头的语句将被忽略,被视为注释
2:命令是由命令名和括号以及括号里面用空白字符分开的参数组成的
3:一对引号之间的内容被视为一个参数。
4:可以用反斜杠用来转义
5:对大小写不敏感

4.2 基础命令
project(projectName [CXX] [C] [Java] [NONE])
设置项目名和语言,不指定语言的情况下默认支持C与C++

add_subdirectory(source_dir [binary_dir][EXCLUDE_FROM_ALL])
添加需要编译的子文件夹,binary_dir 会指定该文件夹的编译结果放在哪里,如果不指定会放在编译文件夹下的一个与source_dir同名的dir里面, EXCLUDE_FROM_ALL 指定这个的时候
将不随make一起编译，可以手动编译，即make targetname
souce_dir 是要添加的待编译的文件夹，一般为相对路径。

set(<variable> <value> [[CACHE <type> <docstring> [FORCE]] | PARENT_SCOPE])
申请或修改变量和cache的值.
设置普通变量直接用set(<variable> <value>)即可,若想设置父范围的变量则需要加PARENT_SCOPE
设置cache则需要指定类型，和说明，以及要不要加FORCE选项

add_executable(<name> [WIN32] [MACOSX_BUNDLE] [EXCLUDE_FROM_ALL] source1 [source2 ...])
指定由源文件生成目标文件。

add_library(<name> [STATIC | SHARED | MODULE] [EXCLUDE_FROM_ALL] source1 [source2 ...])
指定由源文件生成指定类型的库,不指定类型，默认生成静态库。

4.3 控制流
4.3.1 判断
A:简单判断语句，else 与endif的括号是空的，并且一个if对应一个endif 
if(varible)
else()
endif()

B:支持elseif()
if(v1)
elseif(v2)
elseif(v3)
else()
endif()

C：支持逻辑判断
if(variable)
variable 非空 0 FALSE OFF 或NOTFOUND 时, 执行body

if(NOT variable)
variable 是空 0 FALSE OFF 或NOTFOUND 时, 执行body

if(variable AND variable2)
两变量同时为真方可执行body

if(variable OR variable2)
两变量有一者为真,则可执行body

if(COMMAND command-name)
如果command-name是一个可以调用的命令则执行body

if(DEFINED variable)
如果定义了variable 则执行body

if(EXISTS file-name)
if(EXISTS directory-name)
提供的名字是以文件或文件夹方式存在则执行body

if(IS_DIRECTORY name)
提供的名字是目录 则执行body

if(IS_ABSOLUTE name)
提供的名字是绝对路径 则执行body

if(name1 IS_NEWER_THAN name2)
name1文件比name2文件新 则执行body

if(variable MATCHES regex)
if(string MATCHES regex)
提供的变量或字符串符合提供的正则表达式则执行body

数值比较关键字：EQUAL LESS GREATER
字符串比较关键字：STRLESS STREQUAL STRGREATER
版本比较关键字：VERSION_LESS VERSION_EQUAL VERSION_GREATER 
版本号规则：major[.minor[.patch[.tweak]]]

4.3.2 循环
foreach(loopVariableName listBeLooped)
....
endforeach()
用loopVariableName变量在每一次循环中代替listBeLooped中的一个值进入循环，执行一些语句。
foreach可以嵌套，书中提到，可以用${${loopVariableName}_test} 来构造变量名用。

while(testStatmentLikeIf)
endwhile()
while语句是基于一个类似if语句用到的测试语句进行的,如LESS 等。

4.3.3 宏和函数
function(functionName paramers....)
endfunction()
定义函数要用关键字function开始，第一个参数是函数名，其他的都是函数传递的形式参数。
函数传递的是参数在函数内部是一个新的参数，和函数外部的参数没有关系，除非要用PARENT_SCOPE不能改变父范围的值。

macro (macroName paramers...)
endmacro()
和函数的使用是一样的，但是其传入的参数不被看作是变量，而是简单的字符串替换。

4.4 正则表达式















